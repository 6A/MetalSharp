namespace MetalSharp.ARM

open System

open MetalSharp

module Typed =


  let inline private where v cond = assert(cond) ; int v
  let inline private zeroorone v = assert(v = 0uy || v = 1uy) ; int v

  let rec private encodeRegisters = function
  | [] -> 0
  | (r : Register)::rs -> (1 <<< int r.Value) ||| encodeRegisters rs
    
  /// Emits a 'adceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitAdceqEQ")>]
  let adceq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitAdcneNE")>]
  let adcne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitAdccsCS")>]
  let adccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitAdcccCC")>]
  let adccc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitAdchsHS")>]
  let adchs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitAdcloLO")>]
  let adclo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitAdcmiMI")>]
  let adcmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitAdcplPL")>]
  let adcpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitAdcvsVS")>]
  let adcvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitAdcvcVC")>]
  let adcvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitAdchiHI")>]
  let adchi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitAdclsLS")>]
  let adcls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitAdcgeGE")>]
  let adcge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitAdcltLT")>]
  let adclt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitAdcgtGT")>]
  let adcgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitAdcleLE")>]
  let adcle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adc' instruction that executes unconditionally.
  [<CompiledName("EmitAdc")>]
  let adc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'adceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitAdceqEQS")>]
  let adceqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitAdcneNES")>]
  let adcnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitAdccsCSS")>]
  let adccss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitAdcccCCS")>]
  let adcccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitAdchsHSS")>]
  let adchss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitAdcloLOS")>]
  let adclos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitAdcmiMIS")>]
  let adcmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitAdcplPLS")>]
  let adcpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitAdcvsVSS")>]
  let adcvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitAdcvcVCS")>]
  let adcvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitAdchiHIS")>]
  let adchis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitAdclsLSS")>]
  let adclss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitAdcgeGES")>]
  let adcges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitAdcltLTS")>]
  let adclts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitAdcgtGTS")>]
  let adcgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitAdcleLES")>]
  let adcles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'adc' instruction that executes unconditionally.
  [<CompiledName("EmitAdcS")>]
  let adcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitAddeqEQ")>]
  let addeq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitAddneNE")>]
  let addne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitAddcsCS")>]
  let addcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitAddccCC")>]
  let addcc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitAddhsHS")>]
  let addhs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitAddloLO")>]
  let addlo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitAddmiMI")>]
  let addmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitAddplPL")>]
  let addpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitAddvsVS")>]
  let addvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitAddvcVC")>]
  let addvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitAddhiHI")>]
  let addhi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitAddlsLS")>]
  let addls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitAddgeGE")>]
  let addge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitAddltLT")>]
  let addlt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitAddgtGT")>]
  let addgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitAddleLE")>]
  let addle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'add' instruction that executes unconditionally.
  [<CompiledName("EmitAdd")>]
  let add (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'addeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitAddeqEQS")>]
  let addeqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitAddneNES")>]
  let addnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitAddcsCSS")>]
  let addcss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitAddccCCS")>]
  let addccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitAddhsHSS")>]
  let addhss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitAddloLOS")>]
  let addlos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitAddmiMIS")>]
  let addmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitAddplPLS")>]
  let addpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitAddvsVSS")>]
  let addvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitAddvcVCS")>]
  let addvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitAddhiHIS")>]
  let addhis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitAddlsLSS")>]
  let addlss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitAddgeGES")>]
  let addges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitAddltLTS")>]
  let addlts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitAddgtGTS")>]
  let addgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'addle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitAddleLES")>]
  let addles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'add' instruction that executes unconditionally.
  [<CompiledName("EmitAddS")>]
  let adds (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitAndeqEQ")>]
  let andeq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitAndneNE")>]
  let andne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitAndcsCS")>]
  let andcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitAndccCC")>]
  let andcc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitAndhsHS")>]
  let andhs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitAndloLO")>]
  let andlo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitAndmiMI")>]
  let andmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitAndplPL")>]
  let andpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitAndvsVS")>]
  let andvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitAndvcVC")>]
  let andvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitAndhiHI")>]
  let andhi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitAndlsLS")>]
  let andls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitAndgeGE")>]
  let andge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitAndltLT")>]
  let andlt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitAndgtGT")>]
  let andgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitAndleLE")>]
  let andle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'and' instruction that executes unconditionally.
  [<CompiledName("EmitAnd")>]
  let and' (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'andeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitAndeqEQS")>]
  let andeqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitAndneNES")>]
  let andnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitAndcsCSS")>]
  let andcss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitAndccCCS")>]
  let andccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitAndhsHSS")>]
  let andhss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitAndloLOS")>]
  let andlos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitAndmiMIS")>]
  let andmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitAndplPLS")>]
  let andpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitAndvsVSS")>]
  let andvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitAndvcVCS")>]
  let andvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitAndhiHIS")>]
  let andhis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitAndlsLSS")>]
  let andlss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitAndgeGES")>]
  let andges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitAndltLTS")>]
  let andlts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitAndgtGTS")>]
  let andgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'andle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitAndleLES")>]
  let andles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'and' instruction that executes unconditionally.
  [<CompiledName("EmitAndS")>]
  let and's (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eoreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitEoreqEQ")>]
  let eoreq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitEorneNE")>]
  let eorne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitEorcsCS")>]
  let eorcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitEorccCC")>]
  let eorcc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitEorhsHS")>]
  let eorhs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitEorloLO")>]
  let eorlo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eormi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitEormiMI")>]
  let eormi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitEorplPL")>]
  let eorpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitEorvsVS")>]
  let eorvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitEorvcVC")>]
  let eorvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitEorhiHI")>]
  let eorhi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitEorlsLS")>]
  let eorls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitEorgeGE")>]
  let eorge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitEorltLT")>]
  let eorlt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitEorgtGT")>]
  let eorgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eorle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitEorleLE")>]
  let eorle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eor' instruction that executes unconditionally.
  [<CompiledName("EmitEor")>]
  let eor (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'eoreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitEoreqEQS")>]
  let eoreqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitEorneNES")>]
  let eornes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitEorcsCSS")>]
  let eorcss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitEorccCCS")>]
  let eorccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitEorhsHSS")>]
  let eorhss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitEorloLOS")>]
  let eorlos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eormi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitEormiMIS")>]
  let eormis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitEorplPLS")>]
  let eorpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitEorvsVSS")>]
  let eorvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitEorvcVCS")>]
  let eorvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitEorhiHIS")>]
  let eorhis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitEorlsLSS")>]
  let eorlss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitEorgeGES")>]
  let eorges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitEorltLTS")>]
  let eorlts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitEorgtGTS")>]
  let eorgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eorle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitEorleLES")>]
  let eorles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'eor' instruction that executes unconditionally.
  [<CompiledName("EmitEorS")>]
  let eors (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitOrreqEQ")>]
  let orreq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitOrrneNE")>]
  let orrne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitOrrcsCS")>]
  let orrcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitOrrccCC")>]
  let orrcc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitOrrhsHS")>]
  let orrhs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitOrrloLO")>]
  let orrlo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitOrrmiMI")>]
  let orrmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitOrrplPL")>]
  let orrpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitOrrvsVS")>]
  let orrvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitOrrvcVC")>]
  let orrvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitOrrhiHI")>]
  let orrhi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitOrrlsLS")>]
  let orrls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitOrrgeGE")>]
  let orrge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitOrrltLT")>]
  let orrlt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitOrrgtGT")>]
  let orrgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitOrrleLE")>]
  let orrle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orr' instruction that executes unconditionally.
  [<CompiledName("EmitOrr")>]
  let orr (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'orreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitOrreqEQS")>]
  let orreqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitOrrneNES")>]
  let orrnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitOrrcsCSS")>]
  let orrcss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitOrrccCCS")>]
  let orrccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitOrrhsHSS")>]
  let orrhss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitOrrloLOS")>]
  let orrlos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitOrrmiMIS")>]
  let orrmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitOrrplPLS")>]
  let orrpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitOrrvsVSS")>]
  let orrvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitOrrvcVCS")>]
  let orrvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitOrrhiHIS")>]
  let orrhis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitOrrlsLSS")>]
  let orrlss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitOrrgeGES")>]
  let orrges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitOrrltLTS")>]
  let orrlts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitOrrgtGTS")>]
  let orrgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitOrrleLES")>]
  let orrles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'orr' instruction that executes unconditionally.
  [<CompiledName("EmitOrrS")>]
  let orrs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitRsbeqEQ")>]
  let rsbeq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitRsbneNE")>]
  let rsbne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitRsbcsCS")>]
  let rsbcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitRsbccCC")>]
  let rsbcc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitRsbhsHS")>]
  let rsbhs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitRsbloLO")>]
  let rsblo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitRsbmiMI")>]
  let rsbmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitRsbplPL")>]
  let rsbpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitRsbvsVS")>]
  let rsbvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitRsbvcVC")>]
  let rsbvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitRsbhiHI")>]
  let rsbhi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitRsblsLS")>]
  let rsbls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitRsbgeGE")>]
  let rsbge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitRsbltLT")>]
  let rsblt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitRsbgtGT")>]
  let rsbgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitRsbleLE")>]
  let rsble (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsb' instruction that executes unconditionally.
  [<CompiledName("EmitRsb")>]
  let rsb (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitRsbeqEQS")>]
  let rsbeqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitRsbneNES")>]
  let rsbnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitRsbcsCSS")>]
  let rsbcss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitRsbccCCS")>]
  let rsbccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitRsbhsHSS")>]
  let rsbhss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitRsbloLOS")>]
  let rsblos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitRsbmiMIS")>]
  let rsbmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitRsbplPLS")>]
  let rsbpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitRsbvsVSS")>]
  let rsbvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitRsbvcVCS")>]
  let rsbvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitRsbhiHIS")>]
  let rsbhis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitRsblsLSS")>]
  let rsblss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitRsbgeGES")>]
  let rsbges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitRsbltLTS")>]
  let rsblts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitRsbgtGTS")>]
  let rsbgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitRsbleLES")>]
  let rsbles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsb' instruction that executes unconditionally.
  [<CompiledName("EmitRsbS")>]
  let rsbs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitRsceqEQ")>]
  let rsceq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitRscneNE")>]
  let rscne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitRsccsCS")>]
  let rsccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitRscccCC")>]
  let rsccc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rschs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitRschsHS")>]
  let rschs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitRscloLO")>]
  let rsclo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitRscmiMI")>]
  let rscmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitRscplPL")>]
  let rscpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitRscvsVS")>]
  let rscvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitRscvcVC")>]
  let rscvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rschi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitRschiHI")>]
  let rschi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitRsclsLS")>]
  let rscls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitRscgeGE")>]
  let rscge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitRscltLT")>]
  let rsclt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitRscgtGT")>]
  let rscgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rscle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitRscleLE")>]
  let rscle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsc' instruction that executes unconditionally.
  [<CompiledName("EmitRsc")>]
  let rsc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'rsceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitRsceqEQS")>]
  let rsceqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitRscneNES")>]
  let rscnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitRsccsCSS")>]
  let rsccss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitRscccCCS")>]
  let rscccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rschs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitRschsHSS")>]
  let rschss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitRscloLOS")>]
  let rsclos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitRscmiMIS")>]
  let rscmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitRscplPLS")>]
  let rscpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitRscvsVSS")>]
  let rscvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitRscvcVCS")>]
  let rscvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rschi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitRschiHIS")>]
  let rschis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitRsclsLSS")>]
  let rsclss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitRscgeGES")>]
  let rscges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitRscltLTS")>]
  let rsclts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitRscgtGTS")>]
  let rscgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rscle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitRscleLES")>]
  let rscles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'rsc' instruction that executes unconditionally.
  [<CompiledName("EmitRscS")>]
  let rscs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSbceqEQ")>]
  let sbceq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSbcneNE")>]
  let sbcne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSbccsCS")>]
  let sbccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSbcccCC")>]
  let sbccc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSbchsHS")>]
  let sbchs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSbcloLO")>]
  let sbclo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSbcmiMI")>]
  let sbcmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSbcplPL")>]
  let sbcpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSbcvsVS")>]
  let sbcvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSbcvcVC")>]
  let sbcvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSbchiHI")>]
  let sbchi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSbclsLS")>]
  let sbcls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSbcgeGE")>]
  let sbcge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSbcltLT")>]
  let sbclt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSbcgtGT")>]
  let sbcgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSbcleLE")>]
  let sbcle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbc' instruction that executes unconditionally.
  [<CompiledName("EmitSbc")>]
  let sbc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sbceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSbceqEQS")>]
  let sbceqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSbcneNES")>]
  let sbcnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSbccsCSS")>]
  let sbccss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSbcccCCS")>]
  let sbcccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSbchsHSS")>]
  let sbchss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSbcloLOS")>]
  let sbclos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSbcmiMIS")>]
  let sbcmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSbcplPLS")>]
  let sbcpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSbcvsVSS")>]
  let sbcvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSbcvcVCS")>]
  let sbcvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSbchiHIS")>]
  let sbchis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSbclsLSS")>]
  let sbclss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSbcgeGES")>]
  let sbcges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSbcltLTS")>]
  let sbclts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSbcgtGTS")>]
  let sbcgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSbcleLES")>]
  let sbcles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sbc' instruction that executes unconditionally.
  [<CompiledName("EmitSbcS")>]
  let sbcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSubeqEQ")>]
  let subeq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSubneNE")>]
  let subne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSubcsCS")>]
  let subcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSubccCC")>]
  let subcc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSubhsHS")>]
  let subhs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sublo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSubloLO")>]
  let sublo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'submi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSubmiMI")>]
  let submi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSubplPL")>]
  let subpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSubvsVS")>]
  let subvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSubvcVC")>]
  let subvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSubhiHI")>]
  let subhi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSublsLS")>]
  let subls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSubgeGE")>]
  let subge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sublt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSubltLT")>]
  let sublt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSubgtGT")>]
  let subgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'suble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSubleLE")>]
  let suble (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'sub' instruction that executes unconditionally.
  [<CompiledName("EmitSub")>]
  let sub (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'subeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSubeqEQS")>]
  let subeqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSubneNES")>]
  let subnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSubcsCSS")>]
  let subcss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSubccCCS")>]
  let subccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSubhsHSS")>]
  let subhss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sublo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSubloLOS")>]
  let sublos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'submi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSubmiMIS")>]
  let submis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSubplPLS")>]
  let subpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSubvsVSS")>]
  let subvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSubvcVCS")>]
  let subvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSubhiHIS")>]
  let subhis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSublsLSS")>]
  let sublss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSubgeGES")>]
  let subges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sublt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSubltLTS")>]
  let sublts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'subgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSubgtGTS")>]
  let subgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'suble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSubleLES")>]
  let subles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'sub' instruction that executes unconditionally.
  [<CompiledName("EmitSubS")>]
  let subs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bkpt' instruction.
  [<CompiledName("EmitBkpt")>]
  let bkpt (topimm : uint16) (bottomimm : byte)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 16777216 ||| 2097152 ||| ((int topimm) <<< 8) ||| 64 ||| 32 ||| 16 ||| ((int bottomimm) <<< 0)
  /// Emits a 'beq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitBeqEQ")>]
  let beq (immediate : int32)  = instr Condition.EQ + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitBneNE")>]
  let bne (immediate : int32)  = instr Condition.NE + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitBcsCS")>]
  let bcs (immediate : int32)  = instr Condition.CS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitBccCC")>]
  let bcc (immediate : int32)  = instr Condition.CC + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitBhsHS")>]
  let bhs (immediate : int32)  = instr Condition.HS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'blo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitBloLO")>]
  let blo (immediate : int32)  = instr Condition.LO + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitBmiMI")>]
  let bmi (immediate : int32)  = instr Condition.MI + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitBplPL")>]
  let bpl (immediate : int32)  = instr Condition.PL + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitBvsVS")>]
  let bvs (immediate : int32)  = instr Condition.VS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitBvcVC")>]
  let bvc (immediate : int32)  = instr Condition.VC + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitBhiHI")>]
  let bhi (immediate : int32)  = instr Condition.HI + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitBlsLS")>]
  let bls (immediate : int32)  = instr Condition.LS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitBgeGE")>]
  let bge (immediate : int32)  = instr Condition.GE + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'blt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitBltLT")>]
  let blt (immediate : int32)  = instr Condition.LT + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'bgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitBgtGT")>]
  let bgt (immediate : int32)  = instr Condition.GT + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'ble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitBleLE")>]
  let ble (immediate : int32)  = instr Condition.LE + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'b' instruction that executes unconditionally.
  [<CompiledName("EmitB")>]
  let b (immediate : int32)  = instr Condition.AL + (134217728 ||| 33554432 ||| ((int immediate) <<< 0))
  /// Emits a 'beq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitBeqEQL")>]
  let beql (immediate : int32)  = instr Condition.EQ + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitBneNEL")>]
  let bnel (immediate : int32)  = instr Condition.NE + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitBcsCSL")>]
  let bcsl (immediate : int32)  = instr Condition.CS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitBccCCL")>]
  let bccl (immediate : int32)  = instr Condition.CC + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitBhsHSL")>]
  let bhsl (immediate : int32)  = instr Condition.HS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'blo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitBloLOL")>]
  let blol (immediate : int32)  = instr Condition.LO + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitBmiMIL")>]
  let bmil (immediate : int32)  = instr Condition.MI + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitBplPLL")>]
  let bpll (immediate : int32)  = instr Condition.PL + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitBvsVSL")>]
  let bvsl (immediate : int32)  = instr Condition.VS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitBvcVCL")>]
  let bvcl (immediate : int32)  = instr Condition.VC + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitBhiHIL")>]
  let bhil (immediate : int32)  = instr Condition.HI + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitBlsLSL")>]
  let blsl (immediate : int32)  = instr Condition.LS + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitBgeGEL")>]
  let bgel (immediate : int32)  = instr Condition.GE + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'blt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitBltLTL")>]
  let bltl (immediate : int32)  = instr Condition.LT + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'bgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitBgtGTL")>]
  let bgtl (immediate : int32)  = instr Condition.GT + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'ble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitBleLEL")>]
  let blel (immediate : int32)  = instr Condition.LE + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'b' instruction that executes unconditionally.
  [<CompiledName("EmitBL")>]
  let bl (immediate : int32)  = instr Condition.AL + (134217728 ||| 33554432 ||| ((int immediate) <<< 0) ||| 16777216)
  /// Emits a 'biceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitBiceqEQ")>]
  let biceq (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitBicneNE")>]
  let bicne (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'biccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitBiccsCS")>]
  let biccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'biccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitBicccCC")>]
  let biccc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bichs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitBichsHS")>]
  let bichs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'biclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitBicloLO")>]
  let biclo (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitBicmiMI")>]
  let bicmi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitBicplPL")>]
  let bicpl (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitBicvsVS")>]
  let bicvs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitBicvcVC")>]
  let bicvc (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bichi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitBichiHI")>]
  let bichi (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitBiclsLS")>]
  let bicls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitBicgeGE")>]
  let bicge (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'biclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitBicltLT")>]
  let biclt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitBicgtGT")>]
  let bicgt (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bicle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitBicleLE")>]
  let bicle (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'bic' instruction that executes unconditionally.
  [<CompiledName("EmitBic")>]
  let bic (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'biceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitBiceqEQS")>]
  let biceqs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitBicneNES")>]
  let bicnes (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'biccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitBiccsCSS")>]
  let biccss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'biccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitBicccCCS")>]
  let bicccs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bichs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitBichsHSS")>]
  let bichss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'biclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitBicloLOS")>]
  let biclos (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitBicmiMIS")>]
  let bicmis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitBicplPLS")>]
  let bicpls (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitBicvsVSS")>]
  let bicvss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitBicvcVCS")>]
  let bicvcs (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bichi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitBichiHIS")>]
  let bichis (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitBiclsLSS")>]
  let biclss (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitBicgeGES")>]
  let bicges (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'biclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitBicltLTS")>]
  let biclts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitBicgtGTS")>]
  let bicgts (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bicle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitBicleLES")>]
  let bicles (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'bic' instruction that executes unconditionally.
  [<CompiledName("EmitBicS")>]
  let bics (src : Register) (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'blxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitBlxeqEQ")>]
  let blxeq (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitBlxneNE")>]
  let blxne (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitBlxcsCS")>]
  let blxcs (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitBlxccCC")>]
  let blxcc (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitBlxhsHS")>]
  let blxhs (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitBlxloLO")>]
  let blxlo (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitBlxmiMI")>]
  let blxmi (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitBlxplPL")>]
  let blxpl (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitBlxvsVS")>]
  let blxvs (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitBlxvcVC")>]
  let blxvc (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitBlxhiHI")>]
  let blxhi (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitBlxlsLS")>]
  let blxls (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitBlxgeGE")>]
  let blxge (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitBlxltLT")>]
  let blxlt (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitBlxgtGT")>]
  let blxgt (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitBlxleLE")>]
  let blxle (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blx' instruction that executes unconditionally.
  [<CompiledName("EmitBlx")>]
  let blx (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitBxeqEQ")>]
  let bxeq (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitBxneNE")>]
  let bxne (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitBxcsCS")>]
  let bxcs (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitBxccCC")>]
  let bxcc (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitBxhsHS")>]
  let bxhs (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitBxloLO")>]
  let bxlo (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitBxmiMI")>]
  let bxmi (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitBxplPL")>]
  let bxpl (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitBxvsVS")>]
  let bxvs (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitBxvcVC")>]
  let bxvc (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitBxhiHI")>]
  let bxhi (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitBxlsLS")>]
  let bxls (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitBxgeGE")>]
  let bxge (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitBxltLT")>]
  let bxlt (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitBxgtGT")>]
  let bxgt (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitBxleLE")>]
  let bxle (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bx' instruction that executes unconditionally.
  [<CompiledName("EmitBx")>]
  let bx (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitBxjeqEQ")>]
  let bxjeq (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitBxjneNE")>]
  let bxjne (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitBxjcsCS")>]
  let bxjcs (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitBxjccCC")>]
  let bxjcc (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitBxjhsHS")>]
  let bxjhs (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitBxjloLO")>]
  let bxjlo (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitBxjmiMI")>]
  let bxjmi (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitBxjplPL")>]
  let bxjpl (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitBxjvsVS")>]
  let bxjvs (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitBxjvcVC")>]
  let bxjvc (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitBxjhiHI")>]
  let bxjhi (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitBxjlsLS")>]
  let bxjls (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitBxjgeGE")>]
  let bxjge (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitBxjltLT")>]
  let bxjlt (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitBxjgtGT")>]
  let bxjgt (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxjle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitBxjleLE")>]
  let bxjle (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'bxj' instruction that executes unconditionally.
  [<CompiledName("EmitBxj")>]
  let bxj (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'blx'' instruction.
  [<CompiledName("EmitBlx'")>]
  let blx' (h : byte) (immediate : int32)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 134217728 ||| 33554432 ||| ((zeroorone h) <<< 24) ||| ((int immediate) <<< 0)
  /// Emits a 'cdpeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitCdpeqEQ")>]
  let cdpeq (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitCdpneNE")>]
  let cdpne (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.NE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitCdpcsCS")>]
  let cdpcs (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.CS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitCdpccCC")>]
  let cdpcc (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.CC + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdphs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitCdphsHS")>]
  let cdphs (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.HS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdplo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitCdploLO")>]
  let cdplo (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LO + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitCdpmiMI")>]
  let cdpmi (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.MI + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdppl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitCdpplPL")>]
  let cdppl (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.PL + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitCdpvsVS")>]
  let cdpvs (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.VS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitCdpvcVC")>]
  let cdpvc (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.VC + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdphi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitCdphiHI")>]
  let cdphi (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.HI + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitCdplsLS")>]
  let cdpls (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitCdpgeGE")>]
  let cdpge (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.GE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdplt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitCdpltLT")>]
  let cdplt (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LT + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdpgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitCdpgtGT")>]
  let cdpgt (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.GT + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdple' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitCdpleLE")>]
  let cdple (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'cdp' instruction that executes unconditionally.
  [<CompiledName("EmitCdp")>]
  let cdp (opcode1 : byte) (cosrc1 : Register) (codst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.AL + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 16) ||| ((int codst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode2) <<< 5) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'clzeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitClzeqEQ")>]
  let clzeq (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitClzneNE")>]
  let clzne (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitClzcsCS")>]
  let clzcs (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitClzccCC")>]
  let clzcc (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitClzhsHS")>]
  let clzhs (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitClzloLO")>]
  let clzlo (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitClzmiMI")>]
  let clzmi (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitClzplPL")>]
  let clzpl (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitClzvsVS")>]
  let clzvs (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitClzvcVC")>]
  let clzvc (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitClzhiHI")>]
  let clzhi (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitClzlsLS")>]
  let clzls (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitClzgeGE")>]
  let clzge (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitClzltLT")>]
  let clzlt (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitClzgtGT")>]
  let clzgt (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clzle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitClzleLE")>]
  let clzle (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'clz' instruction that executes unconditionally.
  [<CompiledName("EmitClz")>]
  let clz (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cmneq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitCmneqEQ")>]
  let cmneq (src : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitCmnneNE")>]
  let cmnne (src : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmncs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitCmncsCS")>]
  let cmncs (src : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmncc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitCmnccCC")>]
  let cmncc (src : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitCmnhsHS")>]
  let cmnhs (src : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitCmnloLO")>]
  let cmnlo (src : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitCmnmiMI")>]
  let cmnmi (src : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitCmnplPL")>]
  let cmnpl (src : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitCmnvsVS")>]
  let cmnvs (src : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitCmnvcVC")>]
  let cmnvc (src : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitCmnhiHI")>]
  let cmnhi (src : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitCmnlsLS")>]
  let cmnls (src : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitCmngeGE")>]
  let cmnge (src : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitCmnltLT")>]
  let cmnlt (src : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmngt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitCmngtGT")>]
  let cmngt (src : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmnle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitCmnleLE")>]
  let cmnle (src : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmn' instruction that executes unconditionally.
  [<CompiledName("EmitCmn")>]
  let cmn (src : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitCmpeqEQ")>]
  let cmpeq (src : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitCmpneNE")>]
  let cmpne (src : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitCmpcsCS")>]
  let cmpcs (src : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitCmpccCC")>]
  let cmpcc (src : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmphs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitCmphsHS")>]
  let cmphs (src : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmplo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitCmploLO")>]
  let cmplo (src : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitCmpmiMI")>]
  let cmpmi (src : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmppl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitCmpplPL")>]
  let cmppl (src : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitCmpvsVS")>]
  let cmpvs (src : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitCmpvcVC")>]
  let cmpvc (src : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmphi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitCmphiHI")>]
  let cmphi (src : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitCmplsLS")>]
  let cmpls (src : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitCmpgeGE")>]
  let cmpge (src : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmplt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitCmpltLT")>]
  let cmplt (src : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmpgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitCmpgtGT")>]
  let cmpgt (src : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmple' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitCmpleLE")>]
  let cmple (src : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cmp' instruction that executes unconditionally.
  [<CompiledName("EmitCmp")>]
  let cmp (src : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'cpyeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitCpyeqEQ")>]
  let cpyeq (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitCpyneNE")>]
  let cpyne (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpycs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitCpycsCS")>]
  let cpycs (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpycc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitCpyccCC")>]
  let cpycc (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitCpyhsHS")>]
  let cpyhs (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpylo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitCpyloLO")>]
  let cpylo (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpymi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitCpymiMI")>]
  let cpymi (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpypl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitCpyplPL")>]
  let cpypl (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitCpyvsVS")>]
  let cpyvs (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitCpyvcVC")>]
  let cpyvc (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitCpyhiHI")>]
  let cpyhi (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitCpylsLS")>]
  let cpyls (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitCpygeGE")>]
  let cpyge (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpylt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitCpyltLT")>]
  let cpylt (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpygt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitCpygtGT")>]
  let cpygt (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpyle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitCpyleLE")>]
  let cpyle (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cpy' instruction that executes unconditionally.
  [<CompiledName("EmitCpy")>]
  let cpy (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| ((int shifted.Value) <<< 0))
  /// Emits a 'cps' instruction.
  [<CompiledName("EmitCps")>]
  let cps (mode : Mode)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 16777216 ||| 131072 ||| ((int mode) <<< 3)
  /// Emits a 'cpsie' instruction.
  [<CompiledName("EmitCpsie")>]
  let cpsie (iflags : InterruptFlags) (mode : Mode)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 16777216 ||| 524288 ||| 131072 ||| ((int iflags) <<< 9) ||| ((int mode) <<< 3)
  /// Emits a 'cpsid' instruction.
  [<CompiledName("EmitCpsid")>]
  let cpsid (iflags : InterruptFlags) (mode : Mode)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 16777216 ||| 524288 ||| 262144 ||| 131072 ||| ((int iflags) <<< 9) ||| ((int mode) <<< 3)
  /// Emits a 'cpsie'' instruction.
  [<CompiledName("EmitCpsie'")>]
  let cpsie' (iflags : InterruptFlags)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 16777216 ||| 524288 ||| ((int iflags) <<< 9)
  /// Emits a 'cpsid'' instruction.
  [<CompiledName("EmitCpsid'")>]
  let cpsid' (iflags : InterruptFlags)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 16777216 ||| 524288 ||| 262144 ||| ((int iflags) <<< 9)
  /// Emits a 'ldceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdceqEQ")>]
  let ldceq (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdcneNE")>]
  let ldcne (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.NE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdccsCS")>]
  let ldccs (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdcccCC")>]
  let ldccc (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CC + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdchsHS")>]
  let ldchs (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdcloLO")>]
  let ldclo (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LO + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdcmiMI")>]
  let ldcmi (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.MI + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdcplPL")>]
  let ldcpl (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.PL + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdcvsVS")>]
  let ldcvs (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdcvcVC")>]
  let ldcvc (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VC + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdchiHI")>]
  let ldchi (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HI + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdclsLS")>]
  let ldcls (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdcgeGE")>]
  let ldcge (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdcltLT")>]
  let ldclt (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LT + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdcgtGT")>]
  let ldcgt (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GT + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdcleLE")>]
  let ldcle (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldc' instruction that executes unconditionally.
  [<CompiledName("EmitLdc")>]
  let ldc (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.AL + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'ldceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdceqEQW")>]
  let ldceqw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdcneNEW")>]
  let ldcnew (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.NE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdccsCSW")>]
  let ldccsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdcccCCW")>]
  let ldcccw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CC + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdchsHSW")>]
  let ldchsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdcloLOW")>]
  let ldclow (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LO + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdcmiMIW")>]
  let ldcmiw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.MI + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdcplPLW")>]
  let ldcplw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.PL + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdcvsVSW")>]
  let ldcvsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdcvcVCW")>]
  let ldcvcw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VC + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdchiHIW")>]
  let ldchiw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HI + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdclsLSW")>]
  let ldclsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdcgeGEW")>]
  let ldcgew (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdcltLTW")>]
  let ldcltw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LT + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdcgtGTW")>]
  let ldcgtw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GT + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdcleLEW")>]
  let ldclew (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldc' instruction that executes unconditionally.
  [<CompiledName("EmitLdcW")>]
  let ldcw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.AL + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'ldm1eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdm1eqEQ")>]
  let ldm1eq (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdm1neNE")>]
  let ldm1ne (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdm1csCS")>]
  let ldm1cs (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdm1ccCC")>]
  let ldm1cc (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdm1hsHS")>]
  let ldm1hs (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdm1loLO")>]
  let ldm1lo (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdm1miMI")>]
  let ldm1mi (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdm1plPL")>]
  let ldm1pl (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdm1vsVS")>]
  let ldm1vs (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdm1vcVC")>]
  let ldm1vc (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdm1hiHI")>]
  let ldm1hi (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdm1lsLS")>]
  let ldm1ls (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdm1geGE")>]
  let ldm1ge (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdm1ltLT")>]
  let ldm1lt (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdm1gtGT")>]
  let ldm1gt (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdm1leLE")>]
  let ldm1le (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1' instruction that executes unconditionally.
  [<CompiledName("EmitLdm1")>]
  let ldm1 (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm1eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdm1eqEQW")>]
  let ldm1eqw (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdm1neNEW")>]
  let ldm1new (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdm1csCSW")>]
  let ldm1csw (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdm1ccCCW")>]
  let ldm1ccw (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdm1hsHSW")>]
  let ldm1hsw (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdm1loLOW")>]
  let ldm1low (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdm1miMIW")>]
  let ldm1miw (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdm1plPLW")>]
  let ldm1plw (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdm1vsVSW")>]
  let ldm1vsw (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdm1vcVCW")>]
  let ldm1vcw (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdm1hiHIW")>]
  let ldm1hiw (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdm1lsLSW")>]
  let ldm1lsw (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdm1geGEW")>]
  let ldm1gew (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdm1ltLTW")>]
  let ldm1ltw (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdm1gtGTW")>]
  let ldm1gtw (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdm1leLEW")>]
  let ldm1lew (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm1' instruction that executes unconditionally.
  [<CompiledName("EmitLdm1W")>]
  let ldm1w (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm2eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdm2eqEQ")>]
  let ldm2eq (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdm2neNE")>]
  let ldm2ne (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdm2csCS")>]
  let ldm2cs (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdm2ccCC")>]
  let ldm2cc (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdm2hsHS")>]
  let ldm2hs (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdm2loLO")>]
  let ldm2lo (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdm2miMI")>]
  let ldm2mi (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdm2plPL")>]
  let ldm2pl (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdm2vsVS")>]
  let ldm2vs (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdm2vcVC")>]
  let ldm2vc (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdm2hiHI")>]
  let ldm2hi (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdm2lsLS")>]
  let ldm2ls (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdm2geGE")>]
  let ldm2ge (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdm2ltLT")>]
  let ldm2lt (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdm2gtGT")>]
  let ldm2gt (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdm2leLE")>]
  let ldm2le (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm2' instruction that executes unconditionally.
  [<CompiledName("EmitLdm2")>]
  let ldm2 (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdm3eqEQ")>]
  let ldm3eq (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdm3neNE")>]
  let ldm3ne (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdm3csCS")>]
  let ldm3cs (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdm3ccCC")>]
  let ldm3cc (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdm3hsHS")>]
  let ldm3hs (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdm3loLO")>]
  let ldm3lo (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdm3miMI")>]
  let ldm3mi (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdm3plPL")>]
  let ldm3pl (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdm3vsVS")>]
  let ldm3vs (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdm3vcVC")>]
  let ldm3vc (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdm3hiHI")>]
  let ldm3hi (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdm3lsLS")>]
  let ldm3ls (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdm3geGE")>]
  let ldm3ge (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdm3ltLT")>]
  let ldm3lt (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdm3gtGT")>]
  let ldm3gt (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdm3leLE")>]
  let ldm3le (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3' instruction that executes unconditionally.
  [<CompiledName("EmitLdm3")>]
  let ldm3 (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'ldm3eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdm3eqEQW")>]
  let ldm3eqw (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdm3neNEW")>]
  let ldm3new (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdm3csCSW")>]
  let ldm3csw (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdm3ccCCW")>]
  let ldm3ccw (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdm3hsHSW")>]
  let ldm3hsw (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdm3loLOW")>]
  let ldm3low (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdm3miMIW")>]
  let ldm3miw (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdm3plPLW")>]
  let ldm3plw (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdm3vsVSW")>]
  let ldm3vsw (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdm3vcVCW")>]
  let ldm3vcw (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdm3hiHIW")>]
  let ldm3hiw (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdm3lsLSW")>]
  let ldm3lsw (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdm3geGEW")>]
  let ldm3gew (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdm3ltLTW")>]
  let ldm3ltw (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdm3gtGTW")>]
  let ldm3gtw (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdm3leLEW")>]
  let ldm3lew (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldm3' instruction that executes unconditionally.
  [<CompiledName("EmitLdm3W")>]
  let ldm3w (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 131072 ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'ldreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdreqEQ")>]
  let ldreq (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrneNE")>]
  let ldrne (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrcsCS")>]
  let ldrcs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrccCC")>]
  let ldrcc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrhsHS")>]
  let ldrhs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrloLO")>]
  let ldrlo (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrmiMI")>]
  let ldrmi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrplPL")>]
  let ldrpl (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrvsVS")>]
  let ldrvs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrvcVC")>]
  let ldrvc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrhiHI")>]
  let ldrhi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrlsLS")>]
  let ldrls (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrgeGE")>]
  let ldrge (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrltLT")>]
  let ldrlt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrgtGT")>]
  let ldrgt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrleLE")>]
  let ldrle (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldr' instruction that executes unconditionally.
  [<CompiledName("EmitLdr")>]
  let ldr (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdreqEQW")>]
  let ldreqw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrneNEW")>]
  let ldrnew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrcsCSW")>]
  let ldrcsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrccCCW")>]
  let ldrccw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrhsHSW")>]
  let ldrhsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrloLOW")>]
  let ldrlow (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrmiMIW")>]
  let ldrmiw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrplPLW")>]
  let ldrplw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrvsVSW")>]
  let ldrvsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrvcVCW")>]
  let ldrvcw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrhiHIW")>]
  let ldrhiw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrlsLSW")>]
  let ldrlsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrgeGEW")>]
  let ldrgew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrltLTW")>]
  let ldrltw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrgtGTW")>]
  let ldrgtw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrleLEW")>]
  let ldrlew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldr' instruction that executes unconditionally.
  [<CompiledName("EmitLdrW")>]
  let ldrw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrbeqEQ")>]
  let ldrbeq (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrbneNE")>]
  let ldrbne (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrbcsCS")>]
  let ldrbcs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrbccCC")>]
  let ldrbcc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrbhsHS")>]
  let ldrbhs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrbloLO")>]
  let ldrblo (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrbmiMI")>]
  let ldrbmi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrbplPL")>]
  let ldrbpl (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrbvsVS")>]
  let ldrbvs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrbvcVC")>]
  let ldrbvc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrbhiHI")>]
  let ldrbhi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrblsLS")>]
  let ldrbls (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrbgeGE")>]
  let ldrbge (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrbltLT")>]
  let ldrblt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrbgtGT")>]
  let ldrbgt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrbleLE")>]
  let ldrble (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrb' instruction that executes unconditionally.
  [<CompiledName("EmitLdrb")>]
  let ldrb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'ldrbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrbeqEQW")>]
  let ldrbeqw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrbneNEW")>]
  let ldrbnew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrbcsCSW")>]
  let ldrbcsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrbccCCW")>]
  let ldrbccw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrbhsHSW")>]
  let ldrbhsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrbloLOW")>]
  let ldrblow (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrbmiMIW")>]
  let ldrbmiw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrbplPLW")>]
  let ldrbplw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrbvsVSW")>]
  let ldrbvsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrbvcVCW")>]
  let ldrbvcw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrbhiHIW")>]
  let ldrbhiw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrblsLSW")>]
  let ldrblsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrbgeGEW")>]
  let ldrbgew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrbltLTW")>]
  let ldrbltw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrbgtGTW")>]
  let ldrbgtw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrbleLEW")>]
  let ldrblew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrb' instruction that executes unconditionally.
  [<CompiledName("EmitLdrbW")>]
  let ldrbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 16777216 ||| 4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'ldrbteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrbteqEQ")>]
  let ldrbteq (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrbtneNE")>]
  let ldrbtne (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrbtcsCS")>]
  let ldrbtcs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrbtccCC")>]
  let ldrbtcc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrbthsHS")>]
  let ldrbths (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrbtloLO")>]
  let ldrbtlo (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrbtmiMI")>]
  let ldrbtmi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrbtplPL")>]
  let ldrbtpl (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrbtvsVS")>]
  let ldrbtvs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrbtvcVC")>]
  let ldrbtvc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrbthiHI")>]
  let ldrbthi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrbtlsLS")>]
  let ldrbtls (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrbtgeGE")>]
  let ldrbtge (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrbtltLT")>]
  let ldrbtlt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrbtgtGT")>]
  let ldrbtgt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrbtleLE")>]
  let ldrbtle (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrbt' instruction that executes unconditionally.
  [<CompiledName("EmitLdrbt")>]
  let ldrbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrdeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrdeqEQ")>]
  let ldrdeq (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrdneNE")>]
  let ldrdne (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrdcsCS")>]
  let ldrdcs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrdccCC")>]
  let ldrdcc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrdhsHS")>]
  let ldrdhs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrdloLO")>]
  let ldrdlo (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrdmiMI")>]
  let ldrdmi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrdplPL")>]
  let ldrdpl (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrdvsVS")>]
  let ldrdvs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrdvcVC")>]
  let ldrdvc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrdhiHI")>]
  let ldrdhi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrdlsLS")>]
  let ldrdls (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrdgeGE")>]
  let ldrdge (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrdltLT")>]
  let ldrdlt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrdgtGT")>]
  let ldrdgt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrdleLE")>]
  let ldrdle (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrd' instruction that executes unconditionally.
  [<CompiledName("EmitLdrd")>]
  let ldrd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrdeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrdeqEQW")>]
  let ldrdeqw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrdneNEW")>]
  let ldrdnew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrdcsCSW")>]
  let ldrdcsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrdccCCW")>]
  let ldrdccw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrdhsHSW")>]
  let ldrdhsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrdloLOW")>]
  let ldrdlow (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrdmiMIW")>]
  let ldrdmiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrdplPLW")>]
  let ldrdplw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrdvsVSW")>]
  let ldrdvsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrdvcVCW")>]
  let ldrdvcw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrdhiHIW")>]
  let ldrdhiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrdlsLSW")>]
  let ldrdlsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrdgeGEW")>]
  let ldrdgew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrdltLTW")>]
  let ldrdltw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrdgtGTW")>]
  let ldrdgtw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrdle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrdleLEW")>]
  let ldrdlew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrd' instruction that executes unconditionally.
  [<CompiledName("EmitLdrdW")>]
  let ldrdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrexeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrexeqEQ")>]
  let ldrexeq (src : Register) (dst : Register)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrexneNE")>]
  let ldrexne (src : Register) (dst : Register)  = instr Condition.NE + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrexcsCS")>]
  let ldrexcs (src : Register) (dst : Register)  = instr Condition.CS + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrexccCC")>]
  let ldrexcc (src : Register) (dst : Register)  = instr Condition.CC + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrexhsHS")>]
  let ldrexhs (src : Register) (dst : Register)  = instr Condition.HS + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrexloLO")>]
  let ldrexlo (src : Register) (dst : Register)  = instr Condition.LO + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrexmiMI")>]
  let ldrexmi (src : Register) (dst : Register)  = instr Condition.MI + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrexplPL")>]
  let ldrexpl (src : Register) (dst : Register)  = instr Condition.PL + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrexvsVS")>]
  let ldrexvs (src : Register) (dst : Register)  = instr Condition.VS + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrexvcVC")>]
  let ldrexvc (src : Register) (dst : Register)  = instr Condition.VC + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrexhiHI")>]
  let ldrexhi (src : Register) (dst : Register)  = instr Condition.HI + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrexlsLS")>]
  let ldrexls (src : Register) (dst : Register)  = instr Condition.LS + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrexgeGE")>]
  let ldrexge (src : Register) (dst : Register)  = instr Condition.GE + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrexltLT")>]
  let ldrexlt (src : Register) (dst : Register)  = instr Condition.LT + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrexgtGT")>]
  let ldrexgt (src : Register) (dst : Register)  = instr Condition.GT + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrexle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrexleLE")>]
  let ldrexle (src : Register) (dst : Register)  = instr Condition.LE + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrex' instruction that executes unconditionally.
  [<CompiledName("EmitLdrex")>]
  let ldrex (src : Register) (dst : Register)  = instr Condition.AL + (16777216 ||| 8388608 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| 8 ||| 4 ||| 2 ||| 1)
  /// Emits a 'ldrheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrheqEQ")>]
  let ldrheq (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrhneNE")>]
  let ldrhne (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrhcsCS")>]
  let ldrhcs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrhccCC")>]
  let ldrhcc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrhhsHS")>]
  let ldrhhs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrhloLO")>]
  let ldrhlo (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrhmiMI")>]
  let ldrhmi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrhplPL")>]
  let ldrhpl (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrhvsVS")>]
  let ldrhvs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrhvcVC")>]
  let ldrhvc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrhhiHI")>]
  let ldrhhi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrhlsLS")>]
  let ldrhls (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrhgeGE")>]
  let ldrhge (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrhltLT")>]
  let ldrhlt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrhgtGT")>]
  let ldrhgt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrhle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrhleLE")>]
  let ldrhle (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrh' instruction that executes unconditionally.
  [<CompiledName("EmitLdrh")>]
  let ldrh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrheqEQW")>]
  let ldrheqw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrhneNEW")>]
  let ldrhnew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrhcsCSW")>]
  let ldrhcsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrhccCCW")>]
  let ldrhccw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrhhsHSW")>]
  let ldrhhsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrhloLOW")>]
  let ldrhlow (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrhmiMIW")>]
  let ldrhmiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrhplPLW")>]
  let ldrhplw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrhvsVSW")>]
  let ldrhvsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrhvcVCW")>]
  let ldrhvcw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrhhiHIW")>]
  let ldrhhiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrhlsLSW")>]
  let ldrhlsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrhgeGEW")>]
  let ldrhgew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrhltLTW")>]
  let ldrhltw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrhgtGTW")>]
  let ldrhgtw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrhle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrhleLEW")>]
  let ldrhlew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrh' instruction that executes unconditionally.
  [<CompiledName("EmitLdrhW")>]
  let ldrhw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrsbeqEQ")>]
  let ldrsbeq (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrsbneNE")>]
  let ldrsbne (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrsbcsCS")>]
  let ldrsbcs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrsbccCC")>]
  let ldrsbcc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrsbhsHS")>]
  let ldrsbhs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrsbloLO")>]
  let ldrsblo (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrsbmiMI")>]
  let ldrsbmi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrsbplPL")>]
  let ldrsbpl (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrsbvsVS")>]
  let ldrsbvs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrsbvcVC")>]
  let ldrsbvc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrsbhiHI")>]
  let ldrsbhi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrsblsLS")>]
  let ldrsbls (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrsbgeGE")>]
  let ldrsbge (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrsbltLT")>]
  let ldrsblt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrsbgtGT")>]
  let ldrsbgt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrsbleLE")>]
  let ldrsble (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsb' instruction that executes unconditionally.
  [<CompiledName("EmitLdrsb")>]
  let ldrsb (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrsbeqEQW")>]
  let ldrsbeqw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrsbneNEW")>]
  let ldrsbnew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrsbcsCSW")>]
  let ldrsbcsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrsbccCCW")>]
  let ldrsbccw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrsbhsHSW")>]
  let ldrsbhsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrsbloLOW")>]
  let ldrsblow (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrsbmiMIW")>]
  let ldrsbmiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrsbplPLW")>]
  let ldrsbplw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrsbvsVSW")>]
  let ldrsbvsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrsbvcVCW")>]
  let ldrsbvcw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrsbhiHIW")>]
  let ldrsbhiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrsblsLSW")>]
  let ldrsblsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrsbgeGEW")>]
  let ldrsbgew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrsbltLTW")>]
  let ldrsbltw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrsbgtGTW")>]
  let ldrsbgtw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrsbleLEW")>]
  let ldrsblew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsb' instruction that executes unconditionally.
  [<CompiledName("EmitLdrsbW")>]
  let ldrsbw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrsheqEQ")>]
  let ldrsheq (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrshneNE")>]
  let ldrshne (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrshcsCS")>]
  let ldrshcs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrshccCC")>]
  let ldrshcc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrshhsHS")>]
  let ldrshhs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrshloLO")>]
  let ldrshlo (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrshmiMI")>]
  let ldrshmi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrshplPL")>]
  let ldrshpl (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrshvsVS")>]
  let ldrshvs (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrshvcVC")>]
  let ldrshvc (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrshhiHI")>]
  let ldrshhi (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrshlsLS")>]
  let ldrshls (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrshgeGE")>]
  let ldrshge (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrshltLT")>]
  let ldrshlt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrshgtGT")>]
  let ldrshgt (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrshle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrshleLE")>]
  let ldrshle (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsh' instruction that executes unconditionally.
  [<CompiledName("EmitLdrsh")>]
  let ldrsh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'ldrsheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrsheqEQW")>]
  let ldrsheqw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrshneNEW")>]
  let ldrshnew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrshcsCSW")>]
  let ldrshcsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrshccCCW")>]
  let ldrshccw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrshhsHSW")>]
  let ldrshhsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrshloLOW")>]
  let ldrshlow (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrshmiMIW")>]
  let ldrshmiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrshplPLW")>]
  let ldrshplw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrshvsVSW")>]
  let ldrshvsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrshvcVCW")>]
  let ldrshvcw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrshhiHIW")>]
  let ldrshhiw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrshlsLSW")>]
  let ldrshlsw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrshgeGEW")>]
  let ldrshgew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrshltLTW")>]
  let ldrshltw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrshgtGTW")>]
  let ldrshgtw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrshle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrshleLEW")>]
  let ldrshlew (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrsh' instruction that executes unconditionally.
  [<CompiledName("EmitLdrshW")>]
  let ldrshw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (4194304 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'ldrteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitLdrteqEQ")>]
  let ldrteq (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitLdrtneNE")>]
  let ldrtne (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitLdrtcsCS")>]
  let ldrtcs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitLdrtccCC")>]
  let ldrtcc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitLdrthsHS")>]
  let ldrths (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitLdrtloLO")>]
  let ldrtlo (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitLdrtmiMI")>]
  let ldrtmi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitLdrtplPL")>]
  let ldrtpl (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitLdrtvsVS")>]
  let ldrtvs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitLdrtvcVC")>]
  let ldrtvc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitLdrthiHI")>]
  let ldrthi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitLdrtlsLS")>]
  let ldrtls (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitLdrtgeGE")>]
  let ldrtge (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitLdrtltLT")>]
  let ldrtlt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitLdrtgtGT")>]
  let ldrtgt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitLdrtleLE")>]
  let ldrtle (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'ldrt' instruction that executes unconditionally.
  [<CompiledName("EmitLdrt")>]
  let ldrt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'mcreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMcreqEQ")>]
  let mcreq (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMcrneNE")>]
  let mcrne (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.NE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMcrcsCS")>]
  let mcrcs (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.CS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMcrccCC")>]
  let mcrcc (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.CC + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMcrhsHS")>]
  let mcrhs (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.HS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMcrloLO")>]
  let mcrlo (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LO + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMcrmiMI")>]
  let mcrmi (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.MI + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMcrplPL")>]
  let mcrpl (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.PL + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMcrvsVS")>]
  let mcrvs (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.VS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMcrvcVC")>]
  let mcrvc (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.VC + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMcrhiHI")>]
  let mcrhi (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.HI + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMcrlsLS")>]
  let mcrls (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMcrgeGE")>]
  let mcrge (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.GE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMcrltLT")>]
  let mcrlt (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LT + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMcrgtGT")>]
  let mcrgt (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.GT + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMcrleLE")>]
  let mcrle (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcr' instruction that executes unconditionally.
  [<CompiledName("EmitMcr")>]
  let mcr (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.AL + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mcrreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMcrreqEQ")>]
  let mcrreq (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMcrrneNE")>]
  let mcrrne (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.NE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMcrrcsCS")>]
  let mcrrcs (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.CS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMcrrccCC")>]
  let mcrrcc (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.CC + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMcrrhsHS")>]
  let mcrrhs (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.HS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMcrrloLO")>]
  let mcrrlo (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LO + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMcrrmiMI")>]
  let mcrrmi (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.MI + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMcrrplPL")>]
  let mcrrpl (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.PL + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMcrrvsVS")>]
  let mcrrvs (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.VS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMcrrvcVC")>]
  let mcrrvc (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.VC + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMcrrhiHI")>]
  let mcrrhi (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.HI + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMcrrlsLS")>]
  let mcrrls (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LS + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMcrrgeGE")>]
  let mcrrge (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.GE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMcrrltLT")>]
  let mcrrlt (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LT + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMcrrgtGT")>]
  let mcrrgt (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.GT + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMcrrleLE")>]
  let mcrrle (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LE + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mcrr' instruction that executes unconditionally.
  [<CompiledName("EmitMcrr")>]
  let mcrr (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.AL + (134217728 ||| 67108864 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mlaeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMlaeqEQ")>]
  let mlaeq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlane' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMlaneNE")>]
  let mlane (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlacs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMlacsCS")>]
  let mlacs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlacc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMlaccCC")>]
  let mlacc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlahs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMlahsHS")>]
  let mlahs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlalo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMlaloLO")>]
  let mlalo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlami' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMlamiMI")>]
  let mlami (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlapl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMlaplPL")>]
  let mlapl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlavs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMlavsVS")>]
  let mlavs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlavc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMlavcVC")>]
  let mlavc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlahi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMlahiHI")>]
  let mlahi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlals' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMlalsLS")>]
  let mlals (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlage' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMlageGE")>]
  let mlage (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlalt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMlaltLT")>]
  let mlalt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlagt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMlagtGT")>]
  let mlagt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlale' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMlaleLE")>]
  let mlale (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mla' instruction that executes unconditionally.
  [<CompiledName("EmitMla")>]
  let mla (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mlaeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMlaeqEQS")>]
  let mlaeqs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlane' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMlaneNES")>]
  let mlanes (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlacs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMlacsCSS")>]
  let mlacss (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlacc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMlaccCCS")>]
  let mlaccs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlahs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMlahsHSS")>]
  let mlahss (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlalo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMlaloLOS")>]
  let mlalos (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlami' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMlamiMIS")>]
  let mlamis (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlapl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMlaplPLS")>]
  let mlapls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlavs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMlavsVSS")>]
  let mlavss (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlavc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMlavcVCS")>]
  let mlavcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlahi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMlahiHIS")>]
  let mlahis (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlals' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMlalsLSS")>]
  let mlalss (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlage' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMlageGES")>]
  let mlages (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlalt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMlaltLTS")>]
  let mlalts (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlagt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMlagtGTS")>]
  let mlagts (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mlale' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMlaleLES")>]
  let mlales (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mla' instruction that executes unconditionally.
  [<CompiledName("EmitMlaS")>]
  let mlas (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'moveq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMoveqEQ")>]
  let moveq (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMovneNE")>]
  let movne (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMovcsCS")>]
  let movcs (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMovccCC")>]
  let movcc (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMovhsHS")>]
  let movhs (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMovloLO")>]
  let movlo (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMovmiMI")>]
  let movmi (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMovplPL")>]
  let movpl (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMovvsVS")>]
  let movvs (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMovvcVC")>]
  let movvc (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMovhiHI")>]
  let movhi (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMovlsLS")>]
  let movls (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMovgeGE")>]
  let movge (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMovltLT")>]
  let movlt (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMovgtGT")>]
  let movgt (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'movle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMovleLE")>]
  let movle (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mov' instruction that executes unconditionally.
  [<CompiledName("EmitMov")>]
  let mov (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'moveq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMoveqEQS")>]
  let moveqs (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMovneNES")>]
  let movnes (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMovcsCSS")>]
  let movcss (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMovccCCS")>]
  let movccs (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMovhsHSS")>]
  let movhss (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMovloLOS")>]
  let movlos (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMovmiMIS")>]
  let movmis (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMovplPLS")>]
  let movpls (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMovvsVSS")>]
  let movvss (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMovvcVCS")>]
  let movvcs (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMovhiHIS")>]
  let movhis (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMovlsLSS")>]
  let movlss (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMovgeGES")>]
  let movges (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMovltLTS")>]
  let movlts (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMovgtGTS")>]
  let movgts (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'movle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMovleLES")>]
  let movles (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mov' instruction that executes unconditionally.
  [<CompiledName("EmitMovS")>]
  let movs (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mrceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMrceqEQ")>]
  let mrceq (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMrcneNE")>]
  let mrcne (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.NE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMrccsCS")>]
  let mrccs (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.CS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMrcccCC")>]
  let mrccc (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.CC + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMrchsHS")>]
  let mrchs (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.HS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMrcloLO")>]
  let mrclo (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LO + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMrcmiMI")>]
  let mrcmi (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.MI + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMrcplPL")>]
  let mrcpl (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.PL + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMrcvsVS")>]
  let mrcvs (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.VS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMrcvcVC")>]
  let mrcvc (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.VC + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMrchiHI")>]
  let mrchi (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.HI + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMrclsLS")>]
  let mrcls (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LS + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMrcgeGE")>]
  let mrcge (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.GE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMrcltLT")>]
  let mrclt (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LT + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMrcgtGT")>]
  let mrcgt (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.GT + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMrcleLE")>]
  let mrcle (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.LE + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrc' instruction that executes unconditionally.
  [<CompiledName("EmitMrc")>]
  let mrc (opcode1 : byte) (cosrc1 : Register) (dst : Register) (coproc : Coprocessor) (opcode2 : byte) (cosrc2 : Register)  = instr Condition.AL + (134217728 ||| 67108864 ||| 33554432 ||| ((int opcode1) <<< 20) ||| 524288 ||| ((int cosrc1.Value) <<< 15) ||| ((int dst.Value) <<< 11) ||| ((int coproc.Number) <<< 7) ||| ((int opcode2) <<< 4) ||| 8 ||| ((int cosrc2.Value) <<< -1))
  /// Emits a 'mrrceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMrrceqEQ")>]
  let mrrceq (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMrrcneNE")>]
  let mrrcne (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.NE + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMrrccsCS")>]
  let mrrccs (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.CS + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMrrcccCC")>]
  let mrrccc (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.CC + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMrrchsHS")>]
  let mrrchs (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.HS + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMrrcloLO")>]
  let mrrclo (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LO + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMrrcmiMI")>]
  let mrrcmi (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.MI + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMrrcplPL")>]
  let mrrcpl (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.PL + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMrrcvsVS")>]
  let mrrcvs (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.VS + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMrrcvcVC")>]
  let mrrcvc (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.VC + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMrrchiHI")>]
  let mrrchi (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.HI + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMrrclsLS")>]
  let mrrcls (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LS + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMrrcgeGE")>]
  let mrrcge (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.GE + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMrrcltLT")>]
  let mrrclt (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LT + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMrrcgtGT")>]
  let mrrcgt (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.GT + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMrrcleLE")>]
  let mrrcle (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.LE + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrrc' instruction that executes unconditionally.
  [<CompiledName("EmitMrrc")>]
  let mrrc (src : Register) (dst : Register) (coproc : Coprocessor) (opcode : byte) (cosrc2 : Register)  = instr Condition.AL + (134217728 ||| 67108864 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int coproc.Number) <<< 8) ||| ((int opcode) <<< 4) ||| ((int cosrc2.Value) <<< 0))
  /// Emits a 'mrseq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMrseqEQ")>]
  let mrseq (dst : Register)  = instr Condition.EQ + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMrsneNE")>]
  let mrsne (dst : Register)  = instr Condition.NE + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrscs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMrscsCS")>]
  let mrscs (dst : Register)  = instr Condition.CS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrscc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMrsccCC")>]
  let mrscc (dst : Register)  = instr Condition.CC + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrshs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMrshsHS")>]
  let mrshs (dst : Register)  = instr Condition.HS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrslo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMrsloLO")>]
  let mrslo (dst : Register)  = instr Condition.LO + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMrsmiMI")>]
  let mrsmi (dst : Register)  = instr Condition.MI + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrspl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMrsplPL")>]
  let mrspl (dst : Register)  = instr Condition.PL + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMrsvsVS")>]
  let mrsvs (dst : Register)  = instr Condition.VS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMrsvcVC")>]
  let mrsvc (dst : Register)  = instr Condition.VC + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrshi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMrshiHI")>]
  let mrshi (dst : Register)  = instr Condition.HI + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMrslsLS")>]
  let mrsls (dst : Register)  = instr Condition.LS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMrsgeGE")>]
  let mrsge (dst : Register)  = instr Condition.GE + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrslt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMrsltLT")>]
  let mrslt (dst : Register)  = instr Condition.LT + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMrsgtGT")>]
  let mrsgt (dst : Register)  = instr Condition.GT + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrsle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMrsleLE")>]
  let mrsle (dst : Register)  = instr Condition.LE + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrs' instruction that executes unconditionally.
  [<CompiledName("EmitMrs")>]
  let mrs (dst : Register)  = instr Condition.AL + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12))
  /// Emits a 'mrseq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMrseqEQR")>]
  let mrseqr (dst : Register)  = instr Condition.EQ + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMrsneNER")>]
  let mrsner (dst : Register)  = instr Condition.NE + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrscs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMrscsCSR")>]
  let mrscsr (dst : Register)  = instr Condition.CS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrscc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMrsccCCR")>]
  let mrsccr (dst : Register)  = instr Condition.CC + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrshs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMrshsHSR")>]
  let mrshsr (dst : Register)  = instr Condition.HS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrslo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMrsloLOR")>]
  let mrslor (dst : Register)  = instr Condition.LO + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMrsmiMIR")>]
  let mrsmir (dst : Register)  = instr Condition.MI + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrspl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMrsplPLR")>]
  let mrsplr (dst : Register)  = instr Condition.PL + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMrsvsVSR")>]
  let mrsvsr (dst : Register)  = instr Condition.VS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMrsvcVCR")>]
  let mrsvcr (dst : Register)  = instr Condition.VC + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrshi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMrshiHIR")>]
  let mrshir (dst : Register)  = instr Condition.HI + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMrslsLSR")>]
  let mrslsr (dst : Register)  = instr Condition.LS + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMrsgeGER")>]
  let mrsger (dst : Register)  = instr Condition.GE + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrslt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMrsltLTR")>]
  let mrsltr (dst : Register)  = instr Condition.LT + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMrsgtGTR")>]
  let mrsgtr (dst : Register)  = instr Condition.GT + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrsle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMrsleLER")>]
  let mrsler (dst : Register)  = instr Condition.LE + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'mrs' instruction that executes unconditionally.
  [<CompiledName("EmitMrsR")>]
  let mrsr (dst : Register)  = instr Condition.AL + (16777216 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 4194304)
  /// Emits a 'msreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMsreqEQ")>]
  let msreq (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.EQ + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMsrneNE")>]
  let msrne (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.NE + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMsrcsCS")>]
  let msrcs (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.CS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMsrccCC")>]
  let msrcc (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.CC + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMsrhsHS")>]
  let msrhs (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.HS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMsrloLO")>]
  let msrlo (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LO + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMsrmiMI")>]
  let msrmi (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.MI + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMsrplPL")>]
  let msrpl (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.PL + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMsrvsVS")>]
  let msrvs (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.VS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMsrvcVC")>]
  let msrvc (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.VC + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMsrhiHI")>]
  let msrhi (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.HI + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMsrlsLS")>]
  let msrls (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMsrgeGE")>]
  let msrge (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.GE + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMsrltLT")>]
  let msrlt (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LT + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMsrgtGT")>]
  let msrgt (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.GT + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMsrleLE")>]
  let msrle (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LE + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msr' instruction that executes unconditionally.
  [<CompiledName("EmitMsr")>]
  let msr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.AL + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0))
  /// Emits a 'msreq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMsreqEQR")>]
  let msreqr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.EQ + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMsrneNER")>]
  let msrner (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.NE + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMsrcsCSR")>]
  let msrcsr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.CS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMsrccCCR")>]
  let msrccr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.CC + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMsrhsHSR")>]
  let msrhsr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.HS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMsrloLOR")>]
  let msrlor (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LO + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMsrmiMIR")>]
  let msrmir (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.MI + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMsrplPLR")>]
  let msrplr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.PL + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMsrvsVSR")>]
  let msrvsr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.VS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMsrvcVCR")>]
  let msrvcr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.VC + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMsrhiHIR")>]
  let msrhir (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.HI + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMsrlsLSR")>]
  let msrlsr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LS + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMsrgeGER")>]
  let msrger (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.GE + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMsrltLTR")>]
  let msrltr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LT + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMsrgtGTR")>]
  let msrgtr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.GT + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msrle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMsrleLER")>]
  let msrler (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.LE + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msr' instruction that executes unconditionally.
  [<CompiledName("EmitMsrR")>]
  let msrr (field : Field) (rotate : byte) (immediate : byte)  = instr Condition.AL + (33554432 ||| 16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int rotate) <<< 8) ||| ((int immediate) <<< 0) ||| 4194304)
  /// Emits a 'msreq'' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMsreq'EQ")>]
  let msreq' (field : Field) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrne'' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMsrne'NE")>]
  let msrne' (field : Field) (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrcs'' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMsrcs'CS")>]
  let msrcs' (field : Field) (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrcc'' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMsrcc'CC")>]
  let msrcc' (field : Field) (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrhs'' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMsrhs'HS")>]
  let msrhs' (field : Field) (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrlo'' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMsrlo'LO")>]
  let msrlo' (field : Field) (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrmi'' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMsrmi'MI")>]
  let msrmi' (field : Field) (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrpl'' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMsrpl'PL")>]
  let msrpl' (field : Field) (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrvs'' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMsrvs'VS")>]
  let msrvs' (field : Field) (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrvc'' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMsrvc'VC")>]
  let msrvc' (field : Field) (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrhi'' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMsrhi'HI")>]
  let msrhi' (field : Field) (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrls'' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMsrls'LS")>]
  let msrls' (field : Field) (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrge'' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMsrge'GE")>]
  let msrge' (field : Field) (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrlt'' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMsrlt'LT")>]
  let msrlt' (field : Field) (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrgt'' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMsrgt'GT")>]
  let msrgt' (field : Field) (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msrle'' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMsrle'LE")>]
  let msrle' (field : Field) (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msr'' instruction that executes unconditionally.
  [<CompiledName("EmitMsr'")>]
  let msr' (field : Field) (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'msreq'' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMsreq'EQR")>]
  let msreq'r (field : Field) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrne'' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMsrne'NER")>]
  let msrne'r (field : Field) (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrcs'' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMsrcs'CSR")>]
  let msrcs'r (field : Field) (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrcc'' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMsrcc'CCR")>]
  let msrcc'r (field : Field) (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrhs'' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMsrhs'HSR")>]
  let msrhs'r (field : Field) (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrlo'' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMsrlo'LOR")>]
  let msrlo'r (field : Field) (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrmi'' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMsrmi'MIR")>]
  let msrmi'r (field : Field) (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrpl'' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMsrpl'PLR")>]
  let msrpl'r (field : Field) (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrvs'' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMsrvs'VSR")>]
  let msrvs'r (field : Field) (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrvc'' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMsrvc'VCR")>]
  let msrvc'r (field : Field) (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrhi'' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMsrhi'HIR")>]
  let msrhi'r (field : Field) (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrls'' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMsrls'LSR")>]
  let msrls'r (field : Field) (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrge'' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMsrge'GER")>]
  let msrge'r (field : Field) (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrlt'' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMsrlt'LTR")>]
  let msrlt'r (field : Field) (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrgt'' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMsrgt'GTR")>]
  let msrgt'r (field : Field) (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msrle'' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMsrle'LER")>]
  let msrle'r (field : Field) (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'msr'' instruction that executes unconditionally.
  [<CompiledName("EmitMsr'R")>]
  let msr'r (field : Field) (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| ((int field) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shifted.Value) <<< 0) ||| 4194304)
  /// Emits a 'muleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMuleqEQ")>]
  let muleq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMulneNE")>]
  let mulne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMulcsCS")>]
  let mulcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMulccCC")>]
  let mulcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMulhsHS")>]
  let mulhs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mullo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMulloLO")>]
  let mullo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMulmiMI")>]
  let mulmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMulplPL")>]
  let mulpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMulvsVS")>]
  let mulvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMulvcVC")>]
  let mulvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMulhiHI")>]
  let mulhi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMullsLS")>]
  let mulls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMulgeGE")>]
  let mulge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mullt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMulltLT")>]
  let mullt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMulgtGT")>]
  let mulgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mulle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMulleLE")>]
  let mulle (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'mul' instruction that executes unconditionally.
  [<CompiledName("EmitMul")>]
  let mul (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'muleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMuleqEQS")>]
  let muleqs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMulneNES")>]
  let mulnes (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMulcsCSS")>]
  let mulcss (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMulccCCS")>]
  let mulccs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMulhsHSS")>]
  let mulhss (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mullo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMulloLOS")>]
  let mullos (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMulmiMIS")>]
  let mulmis (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMulplPLS")>]
  let mulpls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMulvsVSS")>]
  let mulvss (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMulvcVCS")>]
  let mulvcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMulhiHIS")>]
  let mulhis (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMullsLSS")>]
  let mullss (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMulgeGES")>]
  let mulges (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mullt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMulltLTS")>]
  let mullts (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMulgtGTS")>]
  let mulgts (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mulle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMulleLES")>]
  let mulles (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mul' instruction that executes unconditionally.
  [<CompiledName("EmitMulS")>]
  let muls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'mvneq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMvneqEQ")>]
  let mvneq (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMvnneNE")>]
  let mvnne (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvncs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMvncsCS")>]
  let mvncs (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvncc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMvnccCC")>]
  let mvncc (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMvnhsHS")>]
  let mvnhs (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMvnloLO")>]
  let mvnlo (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMvnmiMI")>]
  let mvnmi (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMvnplPL")>]
  let mvnpl (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMvnvsVS")>]
  let mvnvs (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMvnvcVC")>]
  let mvnvc (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMvnhiHI")>]
  let mvnhi (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMvnlsLS")>]
  let mvnls (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMvngeGE")>]
  let mvnge (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMvnltLT")>]
  let mvnlt (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvngt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMvngtGT")>]
  let mvngt (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvnle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMvnleLE")>]
  let mvnle (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvn' instruction that executes unconditionally.
  [<CompiledName("EmitMvn")>]
  let mvn (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0))
  /// Emits a 'mvneq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitMvneqEQS")>]
  let mvneqs (dst : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitMvnneNES")>]
  let mvnnes (dst : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvncs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitMvncsCSS")>]
  let mvncss (dst : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvncc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitMvnccCCS")>]
  let mvnccs (dst : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitMvnhsHSS")>]
  let mvnhss (dst : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitMvnloLOS")>]
  let mvnlos (dst : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitMvnmiMIS")>]
  let mvnmis (dst : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitMvnplPLS")>]
  let mvnpls (dst : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitMvnvsVSS")>]
  let mvnvss (dst : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitMvnvcVCS")>]
  let mvnvcs (dst : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitMvnhiHIS")>]
  let mvnhis (dst : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitMvnlsLSS")>]
  let mvnlss (dst : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitMvngeGES")>]
  let mvnges (dst : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitMvnltLTS")>]
  let mvnlts (dst : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvngt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitMvngtGTS")>]
  let mvngts (dst : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvnle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitMvnleLES")>]
  let mvnles (dst : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'mvn' instruction that executes unconditionally.
  [<CompiledName("EmitMvnS")>]
  let mvns (dst : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 12) ||| (shifter.Bits <<< 0) ||| 1048576)
  /// Emits a 'pkhbteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitPkhbteqEQ")>]
  let pkhbteq (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitPkhbtneNE")>]
  let pkhbtne (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitPkhbtcsCS")>]
  let pkhbtcs (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitPkhbtccCC")>]
  let pkhbtcc (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitPkhbthsHS")>]
  let pkhbths (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitPkhbtloLO")>]
  let pkhbtlo (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitPkhbtmiMI")>]
  let pkhbtmi (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitPkhbtplPL")>]
  let pkhbtpl (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitPkhbtvsVS")>]
  let pkhbtvs (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitPkhbtvcVC")>]
  let pkhbtvc (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitPkhbthiHI")>]
  let pkhbthi (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitPkhbtlsLS")>]
  let pkhbtls (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitPkhbtgeGE")>]
  let pkhbtge (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitPkhbtltLT")>]
  let pkhbtlt (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitPkhbtgtGT")>]
  let pkhbtgt (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitPkhbtleLE")>]
  let pkhbtle (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhbt' instruction that executes unconditionally.
  [<CompiledName("EmitPkhbt")>]
  let pkhbt (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitPkhtbeqEQ")>]
  let pkhtbeq (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitPkhtbneNE")>]
  let pkhtbne (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitPkhtbcsCS")>]
  let pkhtbcs (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitPkhtbccCC")>]
  let pkhtbcc (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitPkhtbhsHS")>]
  let pkhtbhs (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitPkhtbloLO")>]
  let pkhtblo (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitPkhtbmiMI")>]
  let pkhtbmi (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitPkhtbplPL")>]
  let pkhtbpl (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitPkhtbvsVS")>]
  let pkhtbvs (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitPkhtbvcVC")>]
  let pkhtbvc (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitPkhtbhiHI")>]
  let pkhtbhi (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitPkhtblsLS")>]
  let pkhtbls (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitPkhtbgeGE")>]
  let pkhtbge (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitPkhtbltLT")>]
  let pkhtblt (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitPkhtbgtGT")>]
  let pkhtbgt (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitPkhtbleLE")>]
  let pkhtble (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pkhtb' instruction that executes unconditionally.
  [<CompiledName("EmitPkhtb")>]
  let pkhtb (src : Register) (dst : Register) (shift : byte) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int shift) <<< 7) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'pld' instruction.
  [<CompiledName("EmitPld")>]
  let pld (src : Register) (addrmode : AddressingMode)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 67108864 ||| 16777216 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 17) ||| 65536 ||| 32768 ||| 16384 ||| 8192 ||| (addrmode.Bits12 <<< 1)
  /// Emits a 'qaddeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQaddeqEQ")>]
  let qaddeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQaddneNE")>]
  let qaddne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQaddcsCS")>]
  let qaddcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQaddccCC")>]
  let qaddcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQaddhsHS")>]
  let qaddhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQaddloLO")>]
  let qaddlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQaddmiMI")>]
  let qaddmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQaddplPL")>]
  let qaddpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQaddvsVS")>]
  let qaddvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQaddvcVC")>]
  let qaddvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQaddhiHI")>]
  let qaddhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQaddlsLS")>]
  let qaddls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQaddgeGE")>]
  let qaddge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQaddltLT")>]
  let qaddlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQaddgtGT")>]
  let qaddgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQaddleLE")>]
  let qaddle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd' instruction that executes unconditionally.
  [<CompiledName("EmitQadd")>]
  let qadd (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQadd16eqEQ")>]
  let qadd16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQadd16neNE")>]
  let qadd16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQadd16csCS")>]
  let qadd16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQadd16ccCC")>]
  let qadd16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQadd16hsHS")>]
  let qadd16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQadd16loLO")>]
  let qadd16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQadd16miMI")>]
  let qadd16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQadd16plPL")>]
  let qadd16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQadd16vsVS")>]
  let qadd16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQadd16vcVC")>]
  let qadd16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQadd16hiHI")>]
  let qadd16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQadd16lsLS")>]
  let qadd16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQadd16geGE")>]
  let qadd16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQadd16ltLT")>]
  let qadd16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQadd16gtGT")>]
  let qadd16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQadd16leLE")>]
  let qadd16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd16' instruction that executes unconditionally.
  [<CompiledName("EmitQadd16")>]
  let qadd16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQadd8eqEQ")>]
  let qadd8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQadd8neNE")>]
  let qadd8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQadd8csCS")>]
  let qadd8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQadd8ccCC")>]
  let qadd8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQadd8hsHS")>]
  let qadd8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQadd8loLO")>]
  let qadd8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQadd8miMI")>]
  let qadd8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQadd8plPL")>]
  let qadd8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQadd8vsVS")>]
  let qadd8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQadd8vcVC")>]
  let qadd8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQadd8hiHI")>]
  let qadd8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQadd8lsLS")>]
  let qadd8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQadd8geGE")>]
  let qadd8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQadd8ltLT")>]
  let qadd8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQadd8gtGT")>]
  let qadd8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQadd8leLE")>]
  let qadd8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qadd8' instruction that executes unconditionally.
  [<CompiledName("EmitQadd8")>]
  let qadd8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQaddsubxeqEQ")>]
  let qaddsubxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQaddsubxneNE")>]
  let qaddsubxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQaddsubxcsCS")>]
  let qaddsubxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQaddsubxccCC")>]
  let qaddsubxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQaddsubxhsHS")>]
  let qaddsubxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQaddsubxloLO")>]
  let qaddsubxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQaddsubxmiMI")>]
  let qaddsubxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQaddsubxplPL")>]
  let qaddsubxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQaddsubxvsVS")>]
  let qaddsubxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQaddsubxvcVC")>]
  let qaddsubxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQaddsubxhiHI")>]
  let qaddsubxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQaddsubxlsLS")>]
  let qaddsubxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQaddsubxgeGE")>]
  let qaddsubxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQaddsubxltLT")>]
  let qaddsubxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQaddsubxgtGT")>]
  let qaddsubxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQaddsubxleLE")>]
  let qaddsubxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qaddsubx' instruction that executes unconditionally.
  [<CompiledName("EmitQaddsubx")>]
  let qaddsubx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQdaddeqEQ")>]
  let qdaddeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQdaddneNE")>]
  let qdaddne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQdaddcsCS")>]
  let qdaddcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQdaddccCC")>]
  let qdaddcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQdaddhsHS")>]
  let qdaddhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQdaddloLO")>]
  let qdaddlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQdaddmiMI")>]
  let qdaddmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQdaddplPL")>]
  let qdaddpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQdaddvsVS")>]
  let qdaddvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQdaddvcVC")>]
  let qdaddvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQdaddhiHI")>]
  let qdaddhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQdaddlsLS")>]
  let qdaddls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQdaddgeGE")>]
  let qdaddge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQdaddltLT")>]
  let qdaddlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQdaddgtGT")>]
  let qdaddgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdaddle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQdaddleLE")>]
  let qdaddle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdadd' instruction that executes unconditionally.
  [<CompiledName("EmitQdadd")>]
  let qdadd (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQdsubeqEQ")>]
  let qdsubeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQdsubneNE")>]
  let qdsubne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQdsubcsCS")>]
  let qdsubcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQdsubccCC")>]
  let qdsubcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQdsubhsHS")>]
  let qdsubhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsublo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQdsubloLO")>]
  let qdsublo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQdsubmiMI")>]
  let qdsubmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQdsubplPL")>]
  let qdsubpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQdsubvsVS")>]
  let qdsubvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQdsubvcVC")>]
  let qdsubvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQdsubhiHI")>]
  let qdsubhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQdsublsLS")>]
  let qdsubls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQdsubgeGE")>]
  let qdsubge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsublt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQdsubltLT")>]
  let qdsublt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsubgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQdsubgtGT")>]
  let qdsubgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsuble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQdsubleLE")>]
  let qdsuble (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qdsub' instruction that executes unconditionally.
  [<CompiledName("EmitQdsub")>]
  let qdsub (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQsubeqEQ")>]
  let qsubeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQsubneNE")>]
  let qsubne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQsubcsCS")>]
  let qsubcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQsubccCC")>]
  let qsubcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQsubhsHS")>]
  let qsubhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsublo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQsubloLO")>]
  let qsublo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQsubmiMI")>]
  let qsubmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQsubplPL")>]
  let qsubpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQsubvsVS")>]
  let qsubvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQsubvcVC")>]
  let qsubvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQsubhiHI")>]
  let qsubhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQsublsLS")>]
  let qsubls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQsubgeGE")>]
  let qsubge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsublt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQsubltLT")>]
  let qsublt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQsubgtGT")>]
  let qsubgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsuble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQsubleLE")>]
  let qsuble (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub' instruction that executes unconditionally.
  [<CompiledName("EmitQsub")>]
  let qsub (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQsub16eqEQ")>]
  let qsub16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQsub16neNE")>]
  let qsub16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQsub16csCS")>]
  let qsub16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQsub16ccCC")>]
  let qsub16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQsub16hsHS")>]
  let qsub16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQsub16loLO")>]
  let qsub16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQsub16miMI")>]
  let qsub16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQsub16plPL")>]
  let qsub16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQsub16vsVS")>]
  let qsub16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQsub16vcVC")>]
  let qsub16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQsub16hiHI")>]
  let qsub16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQsub16lsLS")>]
  let qsub16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQsub16geGE")>]
  let qsub16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQsub16ltLT")>]
  let qsub16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQsub16gtGT")>]
  let qsub16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQsub16leLE")>]
  let qsub16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub16' instruction that executes unconditionally.
  [<CompiledName("EmitQsub16")>]
  let qsub16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQsub8eqEQ")>]
  let qsub8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQsub8neNE")>]
  let qsub8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQsub8csCS")>]
  let qsub8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQsub8ccCC")>]
  let qsub8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQsub8hsHS")>]
  let qsub8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQsub8loLO")>]
  let qsub8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQsub8miMI")>]
  let qsub8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQsub8plPL")>]
  let qsub8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQsub8vsVS")>]
  let qsub8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQsub8vcVC")>]
  let qsub8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQsub8hiHI")>]
  let qsub8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQsub8lsLS")>]
  let qsub8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQsub8geGE")>]
  let qsub8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQsub8ltLT")>]
  let qsub8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQsub8gtGT")>]
  let qsub8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQsub8leLE")>]
  let qsub8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsub8' instruction that executes unconditionally.
  [<CompiledName("EmitQsub8")>]
  let qsub8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitQsubaddxeqEQ")>]
  let qsubaddxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitQsubaddxneNE")>]
  let qsubaddxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitQsubaddxcsCS")>]
  let qsubaddxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitQsubaddxccCC")>]
  let qsubaddxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitQsubaddxhsHS")>]
  let qsubaddxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitQsubaddxloLO")>]
  let qsubaddxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitQsubaddxmiMI")>]
  let qsubaddxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitQsubaddxplPL")>]
  let qsubaddxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitQsubaddxvsVS")>]
  let qsubaddxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitQsubaddxvcVC")>]
  let qsubaddxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitQsubaddxhiHI")>]
  let qsubaddxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitQsubaddxlsLS")>]
  let qsubaddxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitQsubaddxgeGE")>]
  let qsubaddxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitQsubaddxltLT")>]
  let qsubaddxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitQsubaddxgtGT")>]
  let qsubaddxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitQsubaddxleLE")>]
  let qsubaddxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'qsubaddx' instruction that executes unconditionally.
  [<CompiledName("EmitQsubaddx")>]
  let qsubaddx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'reveq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitReveqEQ")>]
  let reveq (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitRevneNE")>]
  let revne (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitRevcsCS")>]
  let revcs (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitRevccCC")>]
  let revcc (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitRevhsHS")>]
  let revhs (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitRevloLO")>]
  let revlo (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitRevmiMI")>]
  let revmi (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitRevplPL")>]
  let revpl (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitRevvsVS")>]
  let revvs (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitRevvcVC")>]
  let revvc (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitRevhiHI")>]
  let revhi (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitRevlsLS")>]
  let revls (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitRevgeGE")>]
  let revge (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitRevltLT")>]
  let revlt (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitRevgtGT")>]
  let revgt (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitRevleLE")>]
  let revle (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev' instruction that executes unconditionally.
  [<CompiledName("EmitRev")>]
  let rev (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitRev16eqEQ")>]
  let rev16eq (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitRev16neNE")>]
  let rev16ne (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitRev16csCS")>]
  let rev16cs (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitRev16ccCC")>]
  let rev16cc (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitRev16hsHS")>]
  let rev16hs (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitRev16loLO")>]
  let rev16lo (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitRev16miMI")>]
  let rev16mi (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitRev16plPL")>]
  let rev16pl (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitRev16vsVS")>]
  let rev16vs (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitRev16vcVC")>]
  let rev16vc (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitRev16hiHI")>]
  let rev16hi (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitRev16lsLS")>]
  let rev16ls (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitRev16geGE")>]
  let rev16ge (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitRev16ltLT")>]
  let rev16lt (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitRev16gtGT")>]
  let rev16gt (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitRev16leLE")>]
  let rev16le (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rev16' instruction that executes unconditionally.
  [<CompiledName("EmitRev16")>]
  let rev16 (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revsheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitRevsheqEQ")>]
  let revsheq (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitRevshneNE")>]
  let revshne (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitRevshcsCS")>]
  let revshcs (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitRevshccCC")>]
  let revshcc (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitRevshhsHS")>]
  let revshhs (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitRevshloLO")>]
  let revshlo (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitRevshmiMI")>]
  let revshmi (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitRevshplPL")>]
  let revshpl (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitRevshvsVS")>]
  let revshvs (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitRevshvcVC")>]
  let revshvc (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitRevshhiHI")>]
  let revshhi (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitRevshlsLS")>]
  let revshls (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitRevshgeGE")>]
  let revshge (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitRevshltLT")>]
  let revshlt (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitRevshgtGT")>]
  let revshgt (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revshle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitRevshleLE")>]
  let revshle (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'revsh' instruction that executes unconditionally.
  [<CompiledName("EmitRevsh")>]
  let revsh (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'rfe' instruction.
  [<CompiledName("EmitRfe")>]
  let rfe (src : Register)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 134217728 ||| 4194304 ||| ((int src.Value) <<< 18) ||| 8192 ||| 2048
  /// Emits a 'sadd16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSadd16eqEQ")>]
  let sadd16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSadd16neNE")>]
  let sadd16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSadd16csCS")>]
  let sadd16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSadd16ccCC")>]
  let sadd16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSadd16hsHS")>]
  let sadd16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSadd16loLO")>]
  let sadd16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSadd16miMI")>]
  let sadd16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSadd16plPL")>]
  let sadd16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSadd16vsVS")>]
  let sadd16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSadd16vcVC")>]
  let sadd16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSadd16hiHI")>]
  let sadd16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSadd16lsLS")>]
  let sadd16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSadd16geGE")>]
  let sadd16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSadd16ltLT")>]
  let sadd16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSadd16gtGT")>]
  let sadd16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSadd16leLE")>]
  let sadd16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd16' instruction that executes unconditionally.
  [<CompiledName("EmitSadd16")>]
  let sadd16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSadd8eqEQ")>]
  let sadd8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSadd8neNE")>]
  let sadd8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSadd8csCS")>]
  let sadd8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSadd8ccCC")>]
  let sadd8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSadd8hsHS")>]
  let sadd8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSadd8loLO")>]
  let sadd8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSadd8miMI")>]
  let sadd8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSadd8plPL")>]
  let sadd8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSadd8vsVS")>]
  let sadd8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSadd8vcVC")>]
  let sadd8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSadd8hiHI")>]
  let sadd8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSadd8lsLS")>]
  let sadd8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSadd8geGE")>]
  let sadd8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSadd8ltLT")>]
  let sadd8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSadd8gtGT")>]
  let sadd8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSadd8leLE")>]
  let sadd8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sadd8' instruction that executes unconditionally.
  [<CompiledName("EmitSadd8")>]
  let sadd8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSaddsubxeqEQ")>]
  let saddsubxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSaddsubxneNE")>]
  let saddsubxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSaddsubxcsCS")>]
  let saddsubxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSaddsubxccCC")>]
  let saddsubxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSaddsubxhsHS")>]
  let saddsubxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSaddsubxloLO")>]
  let saddsubxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSaddsubxmiMI")>]
  let saddsubxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSaddsubxplPL")>]
  let saddsubxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSaddsubxvsVS")>]
  let saddsubxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSaddsubxvcVC")>]
  let saddsubxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSaddsubxhiHI")>]
  let saddsubxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSaddsubxlsLS")>]
  let saddsubxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSaddsubxgeGE")>]
  let saddsubxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSaddsubxltLT")>]
  let saddsubxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSaddsubxgtGT")>]
  let saddsubxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSaddsubxleLE")>]
  let saddsubxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'saddsubx' instruction that executes unconditionally.
  [<CompiledName("EmitSaddsubx")>]
  let saddsubx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'seleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSeleqEQ")>]
  let seleq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSelneNE")>]
  let selne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSelcsCS")>]
  let selcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSelccCC")>]
  let selcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSelhsHS")>]
  let selhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sello' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSelloLO")>]
  let sello (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSelmiMI")>]
  let selmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSelplPL")>]
  let selpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSelvsVS")>]
  let selvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSelvcVC")>]
  let selvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSelhiHI")>]
  let selhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sells' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSellsLS")>]
  let sells (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSelgeGE")>]
  let selge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sellt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSelltLT")>]
  let sellt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSelgtGT")>]
  let selgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'selle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSelleLE")>]
  let selle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sel' instruction that executes unconditionally.
  [<CompiledName("EmitSel")>]
  let sel (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'setendbe' instruction.
  [<CompiledName("EmitSetendbe")>]
  let setendbe  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 16777216 ||| 65536 ||| 512
  /// Emits a 'setendle' instruction.
  [<CompiledName("EmitSetendle")>]
  let setendle  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 16777216 ||| 65536
  /// Emits a 'shadd16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitShadd16eqEQ")>]
  let shadd16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitShadd16neNE")>]
  let shadd16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitShadd16csCS")>]
  let shadd16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitShadd16ccCC")>]
  let shadd16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitShadd16hsHS")>]
  let shadd16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitShadd16loLO")>]
  let shadd16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitShadd16miMI")>]
  let shadd16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitShadd16plPL")>]
  let shadd16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitShadd16vsVS")>]
  let shadd16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitShadd16vcVC")>]
  let shadd16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitShadd16hiHI")>]
  let shadd16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitShadd16lsLS")>]
  let shadd16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitShadd16geGE")>]
  let shadd16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitShadd16ltLT")>]
  let shadd16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitShadd16gtGT")>]
  let shadd16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitShadd16leLE")>]
  let shadd16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd16' instruction that executes unconditionally.
  [<CompiledName("EmitShadd16")>]
  let shadd16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitShadd8eqEQ")>]
  let shadd8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitShadd8neNE")>]
  let shadd8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitShadd8csCS")>]
  let shadd8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitShadd8ccCC")>]
  let shadd8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitShadd8hsHS")>]
  let shadd8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitShadd8loLO")>]
  let shadd8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitShadd8miMI")>]
  let shadd8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitShadd8plPL")>]
  let shadd8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitShadd8vsVS")>]
  let shadd8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitShadd8vcVC")>]
  let shadd8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitShadd8hiHI")>]
  let shadd8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitShadd8lsLS")>]
  let shadd8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitShadd8geGE")>]
  let shadd8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitShadd8ltLT")>]
  let shadd8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitShadd8gtGT")>]
  let shadd8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitShadd8leLE")>]
  let shadd8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shadd8' instruction that executes unconditionally.
  [<CompiledName("EmitShadd8")>]
  let shadd8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitShaddsubxeqEQ")>]
  let shaddsubxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitShaddsubxneNE")>]
  let shaddsubxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitShaddsubxcsCS")>]
  let shaddsubxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitShaddsubxccCC")>]
  let shaddsubxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitShaddsubxhsHS")>]
  let shaddsubxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitShaddsubxloLO")>]
  let shaddsubxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitShaddsubxmiMI")>]
  let shaddsubxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitShaddsubxplPL")>]
  let shaddsubxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitShaddsubxvsVS")>]
  let shaddsubxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitShaddsubxvcVC")>]
  let shaddsubxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitShaddsubxhiHI")>]
  let shaddsubxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitShaddsubxlsLS")>]
  let shaddsubxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitShaddsubxgeGE")>]
  let shaddsubxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitShaddsubxltLT")>]
  let shaddsubxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitShaddsubxgtGT")>]
  let shaddsubxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitShaddsubxleLE")>]
  let shaddsubxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shaddsubx' instruction that executes unconditionally.
  [<CompiledName("EmitShaddsubx")>]
  let shaddsubx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitShsub16eqEQ")>]
  let shsub16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitShsub16neNE")>]
  let shsub16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitShsub16csCS")>]
  let shsub16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitShsub16ccCC")>]
  let shsub16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitShsub16hsHS")>]
  let shsub16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitShsub16loLO")>]
  let shsub16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitShsub16miMI")>]
  let shsub16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitShsub16plPL")>]
  let shsub16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitShsub16vsVS")>]
  let shsub16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitShsub16vcVC")>]
  let shsub16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitShsub16hiHI")>]
  let shsub16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitShsub16lsLS")>]
  let shsub16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitShsub16geGE")>]
  let shsub16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitShsub16ltLT")>]
  let shsub16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitShsub16gtGT")>]
  let shsub16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitShsub16leLE")>]
  let shsub16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub16' instruction that executes unconditionally.
  [<CompiledName("EmitShsub16")>]
  let shsub16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitShsub8eqEQ")>]
  let shsub8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitShsub8neNE")>]
  let shsub8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitShsub8csCS")>]
  let shsub8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitShsub8ccCC")>]
  let shsub8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitShsub8hsHS")>]
  let shsub8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitShsub8loLO")>]
  let shsub8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitShsub8miMI")>]
  let shsub8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitShsub8plPL")>]
  let shsub8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitShsub8vsVS")>]
  let shsub8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitShsub8vcVC")>]
  let shsub8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitShsub8hiHI")>]
  let shsub8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitShsub8lsLS")>]
  let shsub8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitShsub8geGE")>]
  let shsub8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitShsub8ltLT")>]
  let shsub8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitShsub8gtGT")>]
  let shsub8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitShsub8leLE")>]
  let shsub8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsub8' instruction that executes unconditionally.
  [<CompiledName("EmitShsub8")>]
  let shsub8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitShsubaddxeqEQ")>]
  let shsubaddxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitShsubaddxneNE")>]
  let shsubaddxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitShsubaddxcsCS")>]
  let shsubaddxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitShsubaddxccCC")>]
  let shsubaddxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitShsubaddxhsHS")>]
  let shsubaddxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitShsubaddxloLO")>]
  let shsubaddxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitShsubaddxmiMI")>]
  let shsubaddxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitShsubaddxplPL")>]
  let shsubaddxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitShsubaddxvsVS")>]
  let shsubaddxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitShsubaddxvcVC")>]
  let shsubaddxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitShsubaddxhiHI")>]
  let shsubaddxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitShsubaddxlsLS")>]
  let shsubaddxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitShsubaddxgeGE")>]
  let shsubaddxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitShsubaddxltLT")>]
  let shsubaddxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitShsubaddxgtGT")>]
  let shsubaddxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitShsubaddxleLE")>]
  let shsubaddxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'shsubaddx' instruction that executes unconditionally.
  [<CompiledName("EmitShsubaddx")>]
  let shsubaddx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlabbeqEQ")>]
  let smlabbeq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlabbneNE")>]
  let smlabbne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlabbcsCS")>]
  let smlabbcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlabbccCC")>]
  let smlabbcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlabbhsHS")>]
  let smlabbhs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlabbloLO")>]
  let smlabblo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlabbmiMI")>]
  let smlabbmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlabbplPL")>]
  let smlabbpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlabbvsVS")>]
  let smlabbvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlabbvcVC")>]
  let smlabbvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlabbhiHI")>]
  let smlabbhi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlabblsLS")>]
  let smlabbls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlabbgeGE")>]
  let smlabbge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlabbltLT")>]
  let smlabblt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlabbgtGT")>]
  let smlabbgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlabbleLE")>]
  let smlabble (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabb' instruction that executes unconditionally.
  [<CompiledName("EmitSmlabb")>]
  let smlabb (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlabteqEQ")>]
  let smlabteq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlabtneNE")>]
  let smlabtne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlabtcsCS")>]
  let smlabtcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlabtccCC")>]
  let smlabtcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlabthsHS")>]
  let smlabths (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlabtloLO")>]
  let smlabtlo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlabtmiMI")>]
  let smlabtmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlabtplPL")>]
  let smlabtpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlabtvsVS")>]
  let smlabtvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlabtvcVC")>]
  let smlabtvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlabthiHI")>]
  let smlabthi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlabtlsLS")>]
  let smlabtls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlabtgeGE")>]
  let smlabtge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlabtltLT")>]
  let smlabtlt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlabtgtGT")>]
  let smlabtgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlabtleLE")>]
  let smlabtle (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlabt' instruction that executes unconditionally.
  [<CompiledName("EmitSmlabt")>]
  let smlabt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlatbeqEQ")>]
  let smlatbeq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlatbneNE")>]
  let smlatbne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlatbcsCS")>]
  let smlatbcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlatbccCC")>]
  let smlatbcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlatbhsHS")>]
  let smlatbhs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlatbloLO")>]
  let smlatblo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlatbmiMI")>]
  let smlatbmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlatbplPL")>]
  let smlatbpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlatbvsVS")>]
  let smlatbvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlatbvcVC")>]
  let smlatbvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlatbhiHI")>]
  let smlatbhi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlatblsLS")>]
  let smlatbls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlatbgeGE")>]
  let smlatbge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlatbltLT")>]
  let smlatblt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlatbgtGT")>]
  let smlatbgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlatbleLE")>]
  let smlatble (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatb' instruction that executes unconditionally.
  [<CompiledName("EmitSmlatb")>]
  let smlatb (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlatteqEQ")>]
  let smlatteq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlattneNE")>]
  let smlattne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlattcsCS")>]
  let smlattcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlattccCC")>]
  let smlattcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlatthsHS")>]
  let smlatths (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlattloLO")>]
  let smlattlo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlattmiMI")>]
  let smlattmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlattplPL")>]
  let smlattpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlattvsVS")>]
  let smlattvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlattvcVC")>]
  let smlattvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlatthiHI")>]
  let smlatthi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlattlsLS")>]
  let smlattls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlattgeGE")>]
  let smlattge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlattltLT")>]
  let smlattlt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlattgtGT")>]
  let smlattgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlattle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlattleLE")>]
  let smlattle (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlatt' instruction that executes unconditionally.
  [<CompiledName("EmitSmlatt")>]
  let smlatt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmladeqEQ")>]
  let smladeq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmladneNE")>]
  let smladne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmladcsCS")>]
  let smladcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmladccCC")>]
  let smladcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmladhsHS")>]
  let smladhs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmladloLO")>]
  let smladlo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmladmiMI")>]
  let smladmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmladplPL")>]
  let smladpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmladvsVS")>]
  let smladvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmladvcVC")>]
  let smladvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmladhiHI")>]
  let smladhi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmladlsLS")>]
  let smladls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmladgeGE")>]
  let smladge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmladltLT")>]
  let smladlt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmladgtGT")>]
  let smladgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmladleLE")>]
  let smladle (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlad' instruction that executes unconditionally.
  [<CompiledName("EmitSmlad")>]
  let smlad (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smladeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmladeqEQX")>]
  let smladeqx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmladneNEX")>]
  let smladnex (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmladcsCSX")>]
  let smladcsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmladccCCX")>]
  let smladccx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmladhsHSX")>]
  let smladhsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmladloLOX")>]
  let smladlox (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmladmiMIX")>]
  let smladmix (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmladplPLX")>]
  let smladplx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmladvsVSX")>]
  let smladvsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmladvcVCX")>]
  let smladvcx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmladhiHIX")>]
  let smladhix (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmladlsLSX")>]
  let smladlsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmladgeGEX")>]
  let smladgex (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmladltLTX")>]
  let smladltx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmladgtGTX")>]
  let smladgtx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smladle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmladleLEX")>]
  let smladlex (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlad' instruction that executes unconditionally.
  [<CompiledName("EmitSmladX")>]
  let smladx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlaleqEQ")>]
  let smlaleq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlalneNE")>]
  let smlalne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlalcsCS")>]
  let smlalcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlalccCC")>]
  let smlalcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlalhsHS")>]
  let smlalhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlallo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlalloLO")>]
  let smlallo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlalmiMI")>]
  let smlalmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlalplPL")>]
  let smlalpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlalvsVS")>]
  let smlalvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlalvcVC")>]
  let smlalvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlalhiHI")>]
  let smlalhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlallsLS")>]
  let smlalls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlalgeGE")>]
  let smlalge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlallt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlalltLT")>]
  let smlallt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlalgtGT")>]
  let smlalgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlalleLE")>]
  let smlalle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlal' instruction that executes unconditionally.
  [<CompiledName("EmitSmlal")>]
  let smlal (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlaleqEQS")>]
  let smlaleqs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlalneNES")>]
  let smlalnes (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlalcsCSS")>]
  let smlalcss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlalccCCS")>]
  let smlalccs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlalhsHSS")>]
  let smlalhss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlallo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlalloLOS")>]
  let smlallos (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlalmiMIS")>]
  let smlalmis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlalplPLS")>]
  let smlalpls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlalvsVSS")>]
  let smlalvss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlalvcVCS")>]
  let smlalvcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlalhiHIS")>]
  let smlalhis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlallsLSS")>]
  let smlallss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlalgeGES")>]
  let smlalges (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlallt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlalltLTS")>]
  let smlallts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlalgtGTS")>]
  let smlalgts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlalleLES")>]
  let smlalles (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlal' instruction that executes unconditionally.
  [<CompiledName("EmitSmlalS")>]
  let smlals (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (8388608 ||| 4194304 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'smlalbbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlalbbeqEQ")>]
  let smlalbbeq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlalbbneNE")>]
  let smlalbbne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlalbbcsCS")>]
  let smlalbbcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlalbbccCC")>]
  let smlalbbcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlalbbhsHS")>]
  let smlalbbhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlalbbloLO")>]
  let smlalbblo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlalbbmiMI")>]
  let smlalbbmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlalbbplPL")>]
  let smlalbbpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlalbbvsVS")>]
  let smlalbbvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlalbbvcVC")>]
  let smlalbbvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlalbbhiHI")>]
  let smlalbbhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlalbblsLS")>]
  let smlalbbls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlalbbgeGE")>]
  let smlalbbge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlalbbltLT")>]
  let smlalbblt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlalbbgtGT")>]
  let smlalbbgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlalbbleLE")>]
  let smlalbble (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbb' instruction that executes unconditionally.
  [<CompiledName("EmitSmlalbb")>]
  let smlalbb (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlalbteqEQ")>]
  let smlalbteq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlalbtneNE")>]
  let smlalbtne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlalbtcsCS")>]
  let smlalbtcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlalbtccCC")>]
  let smlalbtcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlalbthsHS")>]
  let smlalbths (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlalbtloLO")>]
  let smlalbtlo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlalbtmiMI")>]
  let smlalbtmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlalbtplPL")>]
  let smlalbtpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlalbtvsVS")>]
  let smlalbtvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlalbtvcVC")>]
  let smlalbtvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlalbthiHI")>]
  let smlalbthi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlalbtlsLS")>]
  let smlalbtls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlalbtgeGE")>]
  let smlalbtge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlalbtltLT")>]
  let smlalbtlt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlalbtgtGT")>]
  let smlalbtgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlalbtleLE")>]
  let smlalbtle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalbt' instruction that executes unconditionally.
  [<CompiledName("EmitSmlalbt")>]
  let smlalbt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlaltbeqEQ")>]
  let smlaltbeq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlaltbneNE")>]
  let smlaltbne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlaltbcsCS")>]
  let smlaltbcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlaltbccCC")>]
  let smlaltbcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlaltbhsHS")>]
  let smlaltbhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlaltbloLO")>]
  let smlaltblo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlaltbmiMI")>]
  let smlaltbmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlaltbplPL")>]
  let smlaltbpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlaltbvsVS")>]
  let smlaltbvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlaltbvcVC")>]
  let smlaltbvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlaltbhiHI")>]
  let smlaltbhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlaltblsLS")>]
  let smlaltbls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlaltbgeGE")>]
  let smlaltbge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlaltbltLT")>]
  let smlaltblt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlaltbgtGT")>]
  let smlaltbgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlaltbleLE")>]
  let smlaltble (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltb' instruction that executes unconditionally.
  [<CompiledName("EmitSmlaltb")>]
  let smlaltb (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlaltteqEQ")>]
  let smlaltteq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlalttneNE")>]
  let smlalttne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlalttcsCS")>]
  let smlalttcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlalttccCC")>]
  let smlalttcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlaltthsHS")>]
  let smlaltths (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlalttloLO")>]
  let smlalttlo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlalttmiMI")>]
  let smlalttmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlalttplPL")>]
  let smlalttpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlalttvsVS")>]
  let smlalttvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlalttvcVC")>]
  let smlalttvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlaltthiHI")>]
  let smlaltthi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlalttlsLS")>]
  let smlalttls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlalttgeGE")>]
  let smlalttge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlalttltLT")>]
  let smlalttlt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlalttgtGT")>]
  let smlalttgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlalttle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlalttleLE")>]
  let smlalttle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaltt' instruction that executes unconditionally.
  [<CompiledName("EmitSmlaltt")>]
  let smlaltt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlaldeqEQ")>]
  let smlaldeq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlaldneNE")>]
  let smlaldne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlaldcsCS")>]
  let smlaldcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlaldccCC")>]
  let smlaldcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlaldhsHS")>]
  let smlaldhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlaldloLO")>]
  let smlaldlo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlaldmiMI")>]
  let smlaldmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlaldplPL")>]
  let smlaldpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlaldvsVS")>]
  let smlaldvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlaldvcVC")>]
  let smlaldvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlaldhiHI")>]
  let smlaldhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlaldlsLS")>]
  let smlaldls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlaldgeGE")>]
  let smlaldge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlaldltLT")>]
  let smlaldlt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlaldgtGT")>]
  let smlaldgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlaldleLE")>]
  let smlaldle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlald' instruction that executes unconditionally.
  [<CompiledName("EmitSmlald")>]
  let smlald (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlaldeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlaldeqEQX")>]
  let smlaldeqx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlaldneNEX")>]
  let smlaldnex (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlaldcsCSX")>]
  let smlaldcsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlaldccCCX")>]
  let smlaldccx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlaldhsHSX")>]
  let smlaldhsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlaldloLOX")>]
  let smlaldlox (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlaldmiMIX")>]
  let smlaldmix (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlaldplPLX")>]
  let smlaldplx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlaldvsVSX")>]
  let smlaldvsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlaldvcVCX")>]
  let smlaldvcx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlaldhiHIX")>]
  let smlaldhix (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlaldlsLSX")>]
  let smlaldlsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlaldgeGEX")>]
  let smlaldgex (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlaldltLTX")>]
  let smlaldltx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlaldgtGTX")>]
  let smlaldgtx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlaldle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlaldleLEX")>]
  let smlaldlex (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlald' instruction that executes unconditionally.
  [<CompiledName("EmitSmlaldX")>]
  let smlaldx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlawbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlawbeqEQ")>]
  let smlawbeq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlawbneNE")>]
  let smlawbne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlawbcsCS")>]
  let smlawbcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlawbccCC")>]
  let smlawbcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlawbhsHS")>]
  let smlawbhs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlawbloLO")>]
  let smlawblo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlawbmiMI")>]
  let smlawbmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlawbplPL")>]
  let smlawbpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlawbvsVS")>]
  let smlawbvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlawbvcVC")>]
  let smlawbvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlawbhiHI")>]
  let smlawbhi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlawblsLS")>]
  let smlawbls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlawbgeGE")>]
  let smlawbge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlawbltLT")>]
  let smlawblt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlawbgtGT")>]
  let smlawbgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlawbleLE")>]
  let smlawble (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawb' instruction that executes unconditionally.
  [<CompiledName("EmitSmlawb")>]
  let smlawb (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlawteqEQ")>]
  let smlawteq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlawtneNE")>]
  let smlawtne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlawtcsCS")>]
  let smlawtcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlawtccCC")>]
  let smlawtcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlawthsHS")>]
  let smlawths (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlawtloLO")>]
  let smlawtlo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlawtmiMI")>]
  let smlawtmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlawtplPL")>]
  let smlawtpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlawtvsVS")>]
  let smlawtvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlawtvcVC")>]
  let smlawtvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlawthiHI")>]
  let smlawthi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlawtlsLS")>]
  let smlawtls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlawtgeGE")>]
  let smlawtge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlawtltLT")>]
  let smlawtlt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlawtgtGT")>]
  let smlawtgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlawtleLE")>]
  let smlawtle (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlawt' instruction that executes unconditionally.
  [<CompiledName("EmitSmlawt")>]
  let smlawt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlsdeqEQ")>]
  let smlsdeq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlsdneNE")>]
  let smlsdne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlsdcsCS")>]
  let smlsdcs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlsdccCC")>]
  let smlsdcc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlsdhsHS")>]
  let smlsdhs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlsdloLO")>]
  let smlsdlo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlsdmiMI")>]
  let smlsdmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlsdplPL")>]
  let smlsdpl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlsdvsVS")>]
  let smlsdvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlsdvcVC")>]
  let smlsdvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlsdhiHI")>]
  let smlsdhi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlsdlsLS")>]
  let smlsdls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlsdgeGE")>]
  let smlsdge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlsdltLT")>]
  let smlsdlt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlsdgtGT")>]
  let smlsdgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlsdleLE")>]
  let smlsdle (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsd' instruction that executes unconditionally.
  [<CompiledName("EmitSmlsd")>]
  let smlsd (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsdeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlsdeqEQX")>]
  let smlsdeqx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlsdneNEX")>]
  let smlsdnex (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlsdcsCSX")>]
  let smlsdcsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlsdccCCX")>]
  let smlsdccx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlsdhsHSX")>]
  let smlsdhsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlsdloLOX")>]
  let smlsdlox (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlsdmiMIX")>]
  let smlsdmix (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlsdplPLX")>]
  let smlsdplx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlsdvsVSX")>]
  let smlsdvsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlsdvcVCX")>]
  let smlsdvcx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlsdhiHIX")>]
  let smlsdhix (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlsdlsLSX")>]
  let smlsdlsx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlsdgeGEX")>]
  let smlsdgex (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlsdltLTX")>]
  let smlsdltx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlsdgtGTX")>]
  let smlsdgtx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsdle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlsdleLEX")>]
  let smlsdlex (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsd' instruction that executes unconditionally.
  [<CompiledName("EmitSmlsdX")>]
  let smlsdx (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlsldeqEQ")>]
  let smlsldeq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlsldneNE")>]
  let smlsldne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlsldcsCS")>]
  let smlsldcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlsldccCC")>]
  let smlsldcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlsldhsHS")>]
  let smlsldhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlsldloLO")>]
  let smlsldlo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlsldmiMI")>]
  let smlsldmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlsldplPL")>]
  let smlsldpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlsldvsVS")>]
  let smlsldvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlsldvcVC")>]
  let smlsldvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlsldhiHI")>]
  let smlsldhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlsldlsLS")>]
  let smlsldls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlsldgeGE")>]
  let smlsldge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlsldltLT")>]
  let smlsldlt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlsldgtGT")>]
  let smlsldgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlsldleLE")>]
  let smlsldle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsld' instruction that executes unconditionally.
  [<CompiledName("EmitSmlsld")>]
  let smlsld (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smlsldeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmlsldeqEQX")>]
  let smlsldeqx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmlsldneNEX")>]
  let smlsldnex (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmlsldcsCSX")>]
  let smlsldcsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmlsldccCCX")>]
  let smlsldccx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmlsldhsHSX")>]
  let smlsldhsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmlsldloLOX")>]
  let smlsldlox (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmlsldmiMIX")>]
  let smlsldmix (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmlsldplPLX")>]
  let smlsldplx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmlsldvsVSX")>]
  let smlsldvsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmlsldvcVCX")>]
  let smlsldvcx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmlsldhiHIX")>]
  let smlsldhix (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmlsldlsLSX")>]
  let smlsldlsx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmlsldgeGEX")>]
  let smlsldgex (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmlsldltLTX")>]
  let smlsldltx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmlsldgtGTX")>]
  let smlsldgtx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsldle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmlsldleLEX")>]
  let smlsldlex (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smlsld' instruction that executes unconditionally.
  [<CompiledName("EmitSmlsldX")>]
  let smlsldx (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlaeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmmlaeqEQ")>]
  let smmlaeq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlane' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmmlaneNE")>]
  let smmlane (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlacs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmmlacsCS")>]
  let smmlacs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlacc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmmlaccCC")>]
  let smmlacc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlahs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmmlahsHS")>]
  let smmlahs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlalo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmmlaloLO")>]
  let smmlalo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlami' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmmlamiMI")>]
  let smmlami (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlapl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmmlaplPL")>]
  let smmlapl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlavs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmmlavsVS")>]
  let smmlavs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlavc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmmlavcVC")>]
  let smmlavc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlahi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmmlahiHI")>]
  let smmlahi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlals' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmmlalsLS")>]
  let smmlals (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlage' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmmlageGE")>]
  let smmlage (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlalt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmmlaltLT")>]
  let smmlalt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlagt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmmlagtGT")>]
  let smmlagt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlale' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmmlaleLE")>]
  let smmlale (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmla' instruction that executes unconditionally.
  [<CompiledName("EmitSmmla")>]
  let smmla (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlaeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmmlaeqEQR")>]
  let smmlaeqr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlane' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmmlaneNER")>]
  let smmlaner (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlacs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmmlacsCSR")>]
  let smmlacsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlacc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmmlaccCCR")>]
  let smmlaccr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlahs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmmlahsHSR")>]
  let smmlahsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlalo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmmlaloLOR")>]
  let smmlalor (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlami' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmmlamiMIR")>]
  let smmlamir (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlapl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmmlaplPLR")>]
  let smmlaplr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlavs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmmlavsVSR")>]
  let smmlavsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlavc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmmlavcVCR")>]
  let smmlavcr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlahi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmmlahiHIR")>]
  let smmlahir (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlals' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmmlalsLSR")>]
  let smmlalsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlage' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmmlageGER")>]
  let smmlager (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlalt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmmlaltLTR")>]
  let smmlaltr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlagt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmmlagtGTR")>]
  let smmlagtr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlale' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmmlaleLER")>]
  let smmlaler (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmla' instruction that executes unconditionally.
  [<CompiledName("EmitSmmlaR")>]
  let smmlar (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlseq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmmlseqEQ")>]
  let smmlseq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmmlsneNE")>]
  let smmlsne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlscs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmmlscsCS")>]
  let smmlscs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlscc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmmlsccCC")>]
  let smmlscc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlshs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmmlshsHS")>]
  let smmlshs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlslo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmmlsloLO")>]
  let smmlslo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmmlsmiMI")>]
  let smmlsmi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlspl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmmlsplPL")>]
  let smmlspl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmmlsvsVS")>]
  let smmlsvs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmmlsvcVC")>]
  let smmlsvc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlshi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmmlshiHI")>]
  let smmlshi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmmlslsLS")>]
  let smmlsls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmmlsgeGE")>]
  let smmlsge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlslt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmmlsltLT")>]
  let smmlslt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmmlsgtGT")>]
  let smmlsgt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlsle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmmlsleLE")>]
  let smmlsle (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmls' instruction that executes unconditionally.
  [<CompiledName("EmitSmmls")>]
  let smmls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmlseq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmmlseqEQR")>]
  let smmlseqr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmmlsneNER")>]
  let smmlsner (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlscs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmmlscsCSR")>]
  let smmlscsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlscc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmmlsccCCR")>]
  let smmlsccr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlshs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmmlshsHSR")>]
  let smmlshsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlslo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmmlsloLOR")>]
  let smmlslor (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmmlsmiMIR")>]
  let smmlsmir (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlspl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmmlsplPLR")>]
  let smmlsplr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmmlsvsVSR")>]
  let smmlsvsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmmlsvcVCR")>]
  let smmlsvcr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlshi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmmlshiHIR")>]
  let smmlshir (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmmlslsLSR")>]
  let smmlslsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmmlsgeGER")>]
  let smmlsger (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlslt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmmlsltLTR")>]
  let smmlsltr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmmlsgtGTR")>]
  let smmlsgtr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmlsle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmmlsleLER")>]
  let smmlsler (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmls' instruction that executes unconditionally.
  [<CompiledName("EmitSmmlsR")>]
  let smmlsr (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmuleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmmuleqEQ")>]
  let smmuleq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmmulneNE")>]
  let smmulne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmmulcsCS")>]
  let smmulcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmmulccCC")>]
  let smmulcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmmulhsHS")>]
  let smmulhs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmullo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmmulloLO")>]
  let smmullo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmmulmiMI")>]
  let smmulmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmmulplPL")>]
  let smmulpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmmulvsVS")>]
  let smmulvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmmulvcVC")>]
  let smmulvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmmulhiHI")>]
  let smmulhi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmmullsLS")>]
  let smmulls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmmulgeGE")>]
  let smmulge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmullt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmmulltLT")>]
  let smmullt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmmulgtGT")>]
  let smmulgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmulle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmmulleLE")>]
  let smmulle (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmul' instruction that executes unconditionally.
  [<CompiledName("EmitSmmul")>]
  let smmul (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smmuleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmmuleqEQR")>]
  let smmuleqr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmmulneNER")>]
  let smmulner (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmmulcsCSR")>]
  let smmulcsr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmmulccCCR")>]
  let smmulccr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmmulhsHSR")>]
  let smmulhsr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmullo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmmulloLOR")>]
  let smmullor (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmmulmiMIR")>]
  let smmulmir (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmmulplPLR")>]
  let smmulplr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmmulvsVSR")>]
  let smmulvsr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmmulvcVCR")>]
  let smmulvcr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmmulhiHIR")>]
  let smmulhir (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmmullsLSR")>]
  let smmullsr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmmulgeGER")>]
  let smmulger (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmullt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmmulltLTR")>]
  let smmulltr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmmulgtGTR")>]
  let smmulgtr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmulle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmmulleLER")>]
  let smmuller (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smmul' instruction that executes unconditionally.
  [<CompiledName("EmitSmmulR")>]
  let smmulr (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 4194304 ||| 1048576 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmuadeqEQ")>]
  let smuadeq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmuadneNE")>]
  let smuadne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmuadcsCS")>]
  let smuadcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmuadccCC")>]
  let smuadcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmuadhsHS")>]
  let smuadhs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmuadloLO")>]
  let smuadlo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmuadmiMI")>]
  let smuadmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmuadplPL")>]
  let smuadpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmuadvsVS")>]
  let smuadvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmuadvcVC")>]
  let smuadvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmuadhiHI")>]
  let smuadhi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmuadlsLS")>]
  let smuadls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmuadgeGE")>]
  let smuadge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmuadltLT")>]
  let smuadlt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmuadgtGT")>]
  let smuadgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmuadleLE")>]
  let smuadle (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuad' instruction that executes unconditionally.
  [<CompiledName("EmitSmuad")>]
  let smuad (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smuadeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmuadeqEQX")>]
  let smuadeqx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmuadneNEX")>]
  let smuadnex (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmuadcsCSX")>]
  let smuadcsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmuadccCCX")>]
  let smuadccx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmuadhsHSX")>]
  let smuadhsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmuadloLOX")>]
  let smuadlox (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmuadmiMIX")>]
  let smuadmix (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmuadplPLX")>]
  let smuadplx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmuadvsVSX")>]
  let smuadvsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmuadvcVCX")>]
  let smuadvcx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmuadhiHIX")>]
  let smuadhix (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmuadlsLSX")>]
  let smuadlsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmuadgeGEX")>]
  let smuadgex (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmuadltLTX")>]
  let smuadltx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmuadgtGTX")>]
  let smuadgtx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuadle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmuadleLEX")>]
  let smuadlex (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smuad' instruction that executes unconditionally.
  [<CompiledName("EmitSmuadX")>]
  let smuadx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smulbbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmulbbeqEQ")>]
  let smulbbeq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmulbbneNE")>]
  let smulbbne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmulbbcsCS")>]
  let smulbbcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmulbbccCC")>]
  let smulbbcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmulbbhsHS")>]
  let smulbbhs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmulbbloLO")>]
  let smulbblo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmulbbmiMI")>]
  let smulbbmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmulbbplPL")>]
  let smulbbpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmulbbvsVS")>]
  let smulbbvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmulbbvcVC")>]
  let smulbbvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmulbbhiHI")>]
  let smulbbhi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmulbblsLS")>]
  let smulbbls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmulbbgeGE")>]
  let smulbbge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmulbbltLT")>]
  let smulbblt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmulbbgtGT")>]
  let smulbbgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmulbbleLE")>]
  let smulbble (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbb' instruction that executes unconditionally.
  [<CompiledName("EmitSmulbb")>]
  let smulbb (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmulbteqEQ")>]
  let smulbteq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmulbtneNE")>]
  let smulbtne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmulbtcsCS")>]
  let smulbtcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmulbtccCC")>]
  let smulbtcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmulbthsHS")>]
  let smulbths (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmulbtloLO")>]
  let smulbtlo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmulbtmiMI")>]
  let smulbtmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmulbtplPL")>]
  let smulbtpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmulbtvsVS")>]
  let smulbtvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmulbtvcVC")>]
  let smulbtvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmulbthiHI")>]
  let smulbthi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmulbtlsLS")>]
  let smulbtls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmulbtgeGE")>]
  let smulbtge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmulbtltLT")>]
  let smulbtlt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmulbtgtGT")>]
  let smulbtgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmulbtleLE")>]
  let smulbtle (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulbt' instruction that executes unconditionally.
  [<CompiledName("EmitSmulbt")>]
  let smulbt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmultbeqEQ")>]
  let smultbeq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmultbneNE")>]
  let smultbne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmultbcsCS")>]
  let smultbcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmultbccCC")>]
  let smultbcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmultbhsHS")>]
  let smultbhs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmultbloLO")>]
  let smultblo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmultbmiMI")>]
  let smultbmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmultbplPL")>]
  let smultbpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmultbvsVS")>]
  let smultbvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmultbvcVC")>]
  let smultbvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmultbhiHI")>]
  let smultbhi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmultblsLS")>]
  let smultbls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmultbgeGE")>]
  let smultbge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmultbltLT")>]
  let smultblt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmultbgtGT")>]
  let smultbgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmultbleLE")>]
  let smultble (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultb' instruction that executes unconditionally.
  [<CompiledName("EmitSmultb")>]
  let smultb (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmultteqEQ")>]
  let smultteq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmulttneNE")>]
  let smulttne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmulttcsCS")>]
  let smulttcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmulttccCC")>]
  let smulttcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmultthsHS")>]
  let smultths (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmulttloLO")>]
  let smulttlo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmulttmiMI")>]
  let smulttmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmulttplPL")>]
  let smulttpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmulttvsVS")>]
  let smulttvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmulttvcVC")>]
  let smulttvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmultthiHI")>]
  let smultthi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmulttlsLS")>]
  let smulttls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmulttgeGE")>]
  let smulttge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmulttltLT")>]
  let smulttlt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmulttgtGT")>]
  let smulttgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulttle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmulttleLE")>]
  let smulttle (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smultt' instruction that executes unconditionally.
  [<CompiledName("EmitSmultt")>]
  let smultt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmulleqEQ")>]
  let smulleq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmullneNE")>]
  let smullne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmullcsCS")>]
  let smullcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmullccCC")>]
  let smullcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmullhsHS")>]
  let smullhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smulllo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmullloLO")>]
  let smulllo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmullmiMI")>]
  let smullmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmullplPL")>]
  let smullpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmullvsVS")>]
  let smullvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmullvcVC")>]
  let smullvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmullhiHI")>]
  let smullhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmulllsLS")>]
  let smullls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmullgeGE")>]
  let smullge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smulllt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmullltLT")>]
  let smulllt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmullgtGT")>]
  let smullgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smullle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmullleLE")>]
  let smullle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smull' instruction that executes unconditionally.
  [<CompiledName("EmitSmull")>]
  let smull (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1))
  /// Emits a 'smulleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmulleqEQS")>]
  let smulleqs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmullneNES")>]
  let smullnes (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmullcsCSS")>]
  let smullcss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmullccCCS")>]
  let smullccs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmullhsHSS")>]
  let smullhss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smulllo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmullloLOS")>]
  let smulllos (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmullmiMIS")>]
  let smullmis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmullplPLS")>]
  let smullpls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmullvsVSS")>]
  let smullvss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmullvcVCS")>]
  let smullvcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmullhiHIS")>]
  let smullhis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmulllsLSS")>]
  let smulllss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmullgeGES")>]
  let smullges (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smulllt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmullltLTS")>]
  let smulllts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmullgtGTS")>]
  let smullgts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smullle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmullleLES")>]
  let smullles (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smull' instruction that executes unconditionally.
  [<CompiledName("EmitSmullS")>]
  let smulls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (4194304 ||| 2097152 ||| ((int upper.Value) <<< 15) ||| ((int lower.Value) <<< 11) ||| ((int shift.Value) <<< 7) ||| 64 ||| 8 ||| ((int shifted.Value) <<< -1) ||| 524288)
  /// Emits a 'smulwbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmulwbeqEQ")>]
  let smulwbeq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmulwbneNE")>]
  let smulwbne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmulwbcsCS")>]
  let smulwbcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmulwbccCC")>]
  let smulwbcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmulwbhsHS")>]
  let smulwbhs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmulwbloLO")>]
  let smulwblo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmulwbmiMI")>]
  let smulwbmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmulwbplPL")>]
  let smulwbpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmulwbvsVS")>]
  let smulwbvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmulwbvcVC")>]
  let smulwbvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmulwbhiHI")>]
  let smulwbhi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmulwblsLS")>]
  let smulwbls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmulwbgeGE")>]
  let smulwbge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmulwbltLT")>]
  let smulwblt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmulwbgtGT")>]
  let smulwbgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmulwbleLE")>]
  let smulwble (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwb' instruction that executes unconditionally.
  [<CompiledName("EmitSmulwb")>]
  let smulwb (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmulwteqEQ")>]
  let smulwteq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmulwtneNE")>]
  let smulwtne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmulwtcsCS")>]
  let smulwtcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmulwtccCC")>]
  let smulwtcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmulwthsHS")>]
  let smulwths (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmulwtloLO")>]
  let smulwtlo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmulwtmiMI")>]
  let smulwtmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmulwtplPL")>]
  let smulwtpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmulwtvsVS")>]
  let smulwtvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmulwtvcVC")>]
  let smulwtvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmulwthiHI")>]
  let smulwthi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmulwtlsLS")>]
  let smulwtls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmulwtgeGE")>]
  let smulwtge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmulwtltLT")>]
  let smulwtlt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmulwtgtGT")>]
  let smulwtgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwtle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmulwtleLE")>]
  let smulwtle (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smulwt' instruction that executes unconditionally.
  [<CompiledName("EmitSmulwt")>]
  let smulwt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 2097152 ||| ((int dst.Value) <<< 16) ||| ((int shift.Value) <<< 8) ||| 128 ||| 64 ||| 32 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmusdeqEQ")>]
  let smusdeq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmusdneNE")>]
  let smusdne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmusdcsCS")>]
  let smusdcs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmusdccCC")>]
  let smusdcc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmusdhsHS")>]
  let smusdhs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmusdloLO")>]
  let smusdlo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmusdmiMI")>]
  let smusdmi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmusdplPL")>]
  let smusdpl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmusdvsVS")>]
  let smusdvs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmusdvcVC")>]
  let smusdvc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmusdhiHI")>]
  let smusdhi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmusdlsLS")>]
  let smusdls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmusdgeGE")>]
  let smusdge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmusdltLT")>]
  let smusdlt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmusdgtGT")>]
  let smusdgt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmusdleLE")>]
  let smusdle (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusd' instruction that executes unconditionally.
  [<CompiledName("EmitSmusd")>]
  let smusd (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'smusdeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSmusdeqEQX")>]
  let smusdeqx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSmusdneNEX")>]
  let smusdnex (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSmusdcsCSX")>]
  let smusdcsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSmusdccCCX")>]
  let smusdccx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSmusdhsHSX")>]
  let smusdhsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSmusdloLOX")>]
  let smusdlox (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSmusdmiMIX")>]
  let smusdmix (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSmusdplPLX")>]
  let smusdplx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSmusdvsVSX")>]
  let smusdvsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSmusdvcVCX")>]
  let smusdvcx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSmusdhiHIX")>]
  let smusdhix (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSmusdlsLSX")>]
  let smusdlsx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSmusdgeGEX")>]
  let smusdgex (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSmusdltLTX")>]
  let smusdltx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSmusdgtGTX")>]
  let smusdgtx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusdle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSmusdleLEX")>]
  let smusdlex (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'smusd' instruction that executes unconditionally.
  [<CompiledName("EmitSmusdX")>]
  let smusdx (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 32)
  /// Emits a 'srs' instruction.
  [<CompiledName("EmitSrs")>]
  let srs (mode : Mode)  = -2147483648 ||| 1073741824 ||| 536870912 ||| 268435456 ||| 134217728 ||| 16777216 ||| 2097152 ||| 1048576 ||| 262144 ||| 4096 ||| 1024 ||| ((int mode) <<< 1)
  /// Emits a 'ssateq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSsateqEQ")>]
  let ssateq (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSsatneNE")>]
  let ssatne (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSsatcsCS")>]
  let ssatcs (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSsatccCC")>]
  let ssatcc (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssaths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSsathsHS")>]
  let ssaths (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSsatloLO")>]
  let ssatlo (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSsatmiMI")>]
  let ssatmi (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSsatplPL")>]
  let ssatpl (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSsatvsVS")>]
  let ssatvs (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSsatvcVC")>]
  let ssatvc (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssathi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSsathiHI")>]
  let ssathi (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSsatlsLS")>]
  let ssatls (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSsatgeGE")>]
  let ssatge (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSsatltLT")>]
  let ssatlt (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSsatgtGT")>]
  let ssatgt (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssatle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSsatleLE")>]
  let ssatle (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat' instruction that executes unconditionally.
  [<CompiledName("EmitSsat")>]
  let ssat (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 6) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSsat16eqEQ")>]
  let ssat16eq (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSsat16neNE")>]
  let ssat16ne (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSsat16csCS")>]
  let ssat16cs (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSsat16ccCC")>]
  let ssat16cc (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSsat16hsHS")>]
  let ssat16hs (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSsat16loLO")>]
  let ssat16lo (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSsat16miMI")>]
  let ssat16mi (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSsat16plPL")>]
  let ssat16pl (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSsat16vsVS")>]
  let ssat16vs (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSsat16vcVC")>]
  let ssat16vc (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSsat16hiHI")>]
  let ssat16hi (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSsat16lsLS")>]
  let ssat16ls (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSsat16geGE")>]
  let ssat16ge (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSsat16ltLT")>]
  let ssat16lt (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSsat16gtGT")>]
  let ssat16gt (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSsat16leLE")>]
  let ssat16le (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssat16' instruction that executes unconditionally.
  [<CompiledName("EmitSsat16")>]
  let ssat16 (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSsub16eqEQ")>]
  let ssub16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSsub16neNE")>]
  let ssub16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSsub16csCS")>]
  let ssub16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSsub16ccCC")>]
  let ssub16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSsub16hsHS")>]
  let ssub16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSsub16loLO")>]
  let ssub16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSsub16miMI")>]
  let ssub16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSsub16plPL")>]
  let ssub16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSsub16vsVS")>]
  let ssub16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSsub16vcVC")>]
  let ssub16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSsub16hiHI")>]
  let ssub16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSsub16lsLS")>]
  let ssub16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSsub16geGE")>]
  let ssub16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSsub16ltLT")>]
  let ssub16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSsub16gtGT")>]
  let ssub16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSsub16leLE")>]
  let ssub16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub16' instruction that executes unconditionally.
  [<CompiledName("EmitSsub16")>]
  let ssub16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSsub8eqEQ")>]
  let ssub8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSsub8neNE")>]
  let ssub8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSsub8csCS")>]
  let ssub8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSsub8ccCC")>]
  let ssub8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSsub8hsHS")>]
  let ssub8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSsub8loLO")>]
  let ssub8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSsub8miMI")>]
  let ssub8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSsub8plPL")>]
  let ssub8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSsub8vsVS")>]
  let ssub8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSsub8vcVC")>]
  let ssub8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSsub8hiHI")>]
  let ssub8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSsub8lsLS")>]
  let ssub8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSsub8geGE")>]
  let ssub8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSsub8ltLT")>]
  let ssub8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSsub8gtGT")>]
  let ssub8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSsub8leLE")>]
  let ssub8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssub8' instruction that executes unconditionally.
  [<CompiledName("EmitSsub8")>]
  let ssub8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSsubaddxeqEQ")>]
  let ssubaddxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSsubaddxneNE")>]
  let ssubaddxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSsubaddxcsCS")>]
  let ssubaddxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSsubaddxccCC")>]
  let ssubaddxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSsubaddxhsHS")>]
  let ssubaddxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSsubaddxloLO")>]
  let ssubaddxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSsubaddxmiMI")>]
  let ssubaddxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSsubaddxplPL")>]
  let ssubaddxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSsubaddxvsVS")>]
  let ssubaddxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSsubaddxvcVC")>]
  let ssubaddxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSsubaddxhiHI")>]
  let ssubaddxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSsubaddxlsLS")>]
  let ssubaddxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSsubaddxgeGE")>]
  let ssubaddxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSsubaddxltLT")>]
  let ssubaddxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSsubaddxgtGT")>]
  let ssubaddxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSsubaddxleLE")>]
  let ssubaddxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'ssubaddx' instruction that executes unconditionally.
  [<CompiledName("EmitSsubaddx")>]
  let ssubaddx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'stceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStceqEQ")>]
  let stceq (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.EQ + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStcneNE")>]
  let stcne (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.NE + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStccsCS")>]
  let stccs (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStcccCC")>]
  let stccc (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CC + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStchsHS")>]
  let stchs (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStcloLO")>]
  let stclo (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LO + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStcmiMI")>]
  let stcmi (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.MI + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStcplPL")>]
  let stcpl (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.PL + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStcvsVS")>]
  let stcvs (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStcvcVC")>]
  let stcvc (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VC + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStchiHI")>]
  let stchi (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HI + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStclsLS")>]
  let stcls (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStcgeGE")>]
  let stcge (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GE + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStcltLT")>]
  let stclt (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LT + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStcgtGT")>]
  let stcgt (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GT + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStcleLE")>]
  let stcle (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LE + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stc' instruction that executes unconditionally.
  [<CompiledName("EmitStc")>]
  let stc (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.AL + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2))
  /// Emits a 'stceq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStceqEQW")>]
  let stceqw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.EQ + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStcneNEW")>]
  let stcnew (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.NE + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stccs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStccsCSW")>]
  let stccsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stccc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStcccCCW")>]
  let stcccw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.CC + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stchs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStchsHSW")>]
  let stchsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stclo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStcloLOW")>]
  let stclow (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LO + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStcmiMIW")>]
  let stcmiw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.MI + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStcplPLW")>]
  let stcplw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.PL + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStcvsVSW")>]
  let stcvsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStcvcVCW")>]
  let stcvcw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.VC + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stchi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStchiHIW")>]
  let stchiw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.HI + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStclsLSW")>]
  let stclsw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LS + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStcgeGEW")>]
  let stcgew (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GE + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stclt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStcltLTW")>]
  let stcltw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LT + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStcgtGTW")>]
  let stcgtw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.GT + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stcle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStcleLEW")>]
  let stclew (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.LE + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stc' instruction that executes unconditionally.
  [<CompiledName("EmitStcW")>]
  let stcw (src : Register) (codst : Register) (coproc : Coprocessor) (offset : byte)  = instr Condition.AL + (134217728 ||| 67108864 ||| ((int src.Value) <<< 18) ||| ((int codst.Value) <<< 14) ||| ((int coproc.Number) <<< 10) ||| ((int offset) <<< 2) ||| 8388608)
  /// Emits a 'stm1eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStm1eqEQ")>]
  let stm1eq (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStm1neNE")>]
  let stm1ne (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStm1csCS")>]
  let stm1cs (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStm1ccCC")>]
  let stm1cc (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStm1hsHS")>]
  let stm1hs (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStm1loLO")>]
  let stm1lo (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStm1miMI")>]
  let stm1mi (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStm1plPL")>]
  let stm1pl (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStm1vsVS")>]
  let stm1vs (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStm1vcVC")>]
  let stm1vc (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStm1hiHI")>]
  let stm1hi (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStm1lsLS")>]
  let stm1ls (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStm1geGE")>]
  let stm1ge (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStm1ltLT")>]
  let stm1lt (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStm1gtGT")>]
  let stm1gt (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStm1leLE")>]
  let stm1le (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1' instruction that executes unconditionally.
  [<CompiledName("EmitStm1")>]
  let stm1 (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm1eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStm1eqEQW")>]
  let stm1eqw (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStm1neNEW")>]
  let stm1new (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStm1csCSW")>]
  let stm1csw (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStm1ccCCW")>]
  let stm1ccw (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStm1hsHSW")>]
  let stm1hsw (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStm1loLOW")>]
  let stm1low (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStm1miMIW")>]
  let stm1miw (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStm1plPLW")>]
  let stm1plw (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStm1vsVSW")>]
  let stm1vsw (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStm1vcVCW")>]
  let stm1vcw (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStm1hiHIW")>]
  let stm1hiw (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStm1lsLSW")>]
  let stm1lsw (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStm1geGEW")>]
  let stm1gew (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStm1ltLTW")>]
  let stm1ltw (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStm1gtGTW")>]
  let stm1gtw (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStm1leLEW")>]
  let stm1lew (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm1' instruction that executes unconditionally.
  [<CompiledName("EmitStm1W")>]
  let stm1w (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0) ||| 8388608)
  /// Emits a 'stm2eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStm2eqEQ")>]
  let stm2eq (src : Register) (reglist : Register list)  = instr Condition.EQ + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStm2neNE")>]
  let stm2ne (src : Register) (reglist : Register list)  = instr Condition.NE + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStm2csCS")>]
  let stm2cs (src : Register) (reglist : Register list)  = instr Condition.CS + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStm2ccCC")>]
  let stm2cc (src : Register) (reglist : Register list)  = instr Condition.CC + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStm2hsHS")>]
  let stm2hs (src : Register) (reglist : Register list)  = instr Condition.HS + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStm2loLO")>]
  let stm2lo (src : Register) (reglist : Register list)  = instr Condition.LO + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStm2miMI")>]
  let stm2mi (src : Register) (reglist : Register list)  = instr Condition.MI + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStm2plPL")>]
  let stm2pl (src : Register) (reglist : Register list)  = instr Condition.PL + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStm2vsVS")>]
  let stm2vs (src : Register) (reglist : Register list)  = instr Condition.VS + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStm2vcVC")>]
  let stm2vc (src : Register) (reglist : Register list)  = instr Condition.VC + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStm2hiHI")>]
  let stm2hi (src : Register) (reglist : Register list)  = instr Condition.HI + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStm2lsLS")>]
  let stm2ls (src : Register) (reglist : Register list)  = instr Condition.LS + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStm2geGE")>]
  let stm2ge (src : Register) (reglist : Register list)  = instr Condition.GE + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStm2ltLT")>]
  let stm2lt (src : Register) (reglist : Register list)  = instr Condition.LT + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStm2gtGT")>]
  let stm2gt (src : Register) (reglist : Register list)  = instr Condition.GT + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStm2leLE")>]
  let stm2le (src : Register) (reglist : Register list)  = instr Condition.LE + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'stm2' instruction that executes unconditionally.
  [<CompiledName("EmitStm2")>]
  let stm2 (src : Register) (reglist : Register list)  = instr Condition.AL + (134217728 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((encodeRegisters reglist) <<< 0))
  /// Emits a 'streq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqEQ")>]
  let streq (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrneNE")>]
  let strne (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcsCS")>]
  let strcs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrccCC")>]
  let strcc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhsHS")>]
  let strhs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrloLO")>]
  let strlo (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmiMI")>]
  let strmi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrplPL")>]
  let strpl (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvsVS")>]
  let strvs (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvcVC")>]
  let strvc (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhiHI")>]
  let strhi (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlsLS")>]
  let strls (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgeGE")>]
  let strge (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrltLT")>]
  let strlt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgtGT")>]
  let strgt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrleLE")>]
  let strle (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'str' instruction that executes unconditionally.
  [<CompiledName("EmitStr")>]
  let str (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'streq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqEQW")>]
  let streqw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrneNEW")>]
  let strnew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcsCSW")>]
  let strcsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrccCCW")>]
  let strccw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhsHSW")>]
  let strhsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrloLOW")>]
  let strlow (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmiMIW")>]
  let strmiw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrplPLW")>]
  let strplw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvsVSW")>]
  let strvsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvcVCW")>]
  let strvcw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhiHIW")>]
  let strhiw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlsLSW")>]
  let strlsw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgeGEW")>]
  let strgew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrltLTW")>]
  let strltw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgtGTW")>]
  let strgtw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrleLEW")>]
  let strlew (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'str' instruction that executes unconditionally.
  [<CompiledName("EmitStrW")>]
  let strw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'streqb' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqbEQ")>]
  let streqb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strneb' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnebNE")>]
  let strneb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strcsb' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcsbCS")>]
  let strcsb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strccb' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrccbCC")>]
  let strccb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strhsb' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhsbHS")>]
  let strhsb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strlob' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlobLO")>]
  let strlob (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strmib' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmibMI")>]
  let strmib (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strplb' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrplbPL")>]
  let strplb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strvsb' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvsbVS")>]
  let strvsb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strvcb' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvcbVC")>]
  let strvcb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strhib' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhibHI")>]
  let strhib (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strlsb' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlsbLS")>]
  let strlsb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strgeb' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgebGE")>]
  let strgeb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strltb' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrltbLT")>]
  let strltb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strgtb' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgtbGT")>]
  let strgtb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strleb' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrlebLE")>]
  let strleb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'strb' instruction that executes unconditionally.
  [<CompiledName("EmitStrb")>]
  let strb (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2))
  /// Emits a 'streqb' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqbEQW")>]
  let streqbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strneb' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnebNEW")>]
  let strnebw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strcsb' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcsbCSW")>]
  let strcsbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strccb' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrccbCCW")>]
  let strccbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strhsb' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhsbHSW")>]
  let strhsbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strlob' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlobLOW")>]
  let strlobw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strmib' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmibMIW")>]
  let strmibw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strplb' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrplbPLW")>]
  let strplbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strvsb' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvsbVSW")>]
  let strvsbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strvcb' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvcbVCW")>]
  let strvcbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strhib' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhibHIW")>]
  let strhibw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strlsb' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlsbLSW")>]
  let strlsbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strgeb' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgebGEW")>]
  let strgebw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strltb' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrltbLTW")>]
  let strltbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strgtb' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgtbGTW")>]
  let strgtbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strleb' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrlebLEW")>]
  let strlebw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'strb' instruction that executes unconditionally.
  [<CompiledName("EmitStrbW")>]
  let strbw (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 16777216 ||| ((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode.Bits12 <<< 2) ||| 8388608)
  /// Emits a 'streqbt' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqbtEQ")>]
  let streqbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strnebt' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnebtNE")>]
  let strnebt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strcsbt' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcsbtCS")>]
  let strcsbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strccbt' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrccbtCC")>]
  let strccbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strhsbt' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhsbtHS")>]
  let strhsbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strlobt' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlobtLO")>]
  let strlobt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strmibt' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmibtMI")>]
  let strmibt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strplbt' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrplbtPL")>]
  let strplbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strvsbt' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvsbtVS")>]
  let strvsbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strvcbt' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvcbtVC")>]
  let strvcbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strhibt' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhibtHI")>]
  let strhibt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strlsbt' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlsbtLS")>]
  let strlsbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strgebt' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgebtGE")>]
  let strgebt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strltbt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrltbtLT")>]
  let strltbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strgtbt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgtbtGT")>]
  let strgtbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strlebt' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrlebtLE")>]
  let strlebt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strbt' instruction that executes unconditionally.
  [<CompiledName("EmitStrbt")>]
  let strbt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'streqd' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqdEQ")>]
  let streqd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strned' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnedNE")>]
  let strned (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strcsd' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcsdCS")>]
  let strcsd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strccd' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrccdCC")>]
  let strccd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strhsd' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhsdHS")>]
  let strhsd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strlod' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlodLO")>]
  let strlod (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strmid' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmidMI")>]
  let strmid (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strpld' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrpldPL")>]
  let strpld (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strvsd' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvsdVS")>]
  let strvsd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strvcd' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvcdVC")>]
  let strvcd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strhid' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhidHI")>]
  let strhid (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strlsd' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlsdLS")>]
  let strlsd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strged' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgedGE")>]
  let strged (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strltd' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrltdLT")>]
  let strltd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strgtd' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgtdGT")>]
  let strgtd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strled' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrledLE")>]
  let strled (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strd' instruction that executes unconditionally.
  [<CompiledName("EmitStrd")>]
  let strd (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'streqd' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqdEQW")>]
  let streqdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strned' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnedNEW")>]
  let strnedw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strcsd' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcsdCSW")>]
  let strcsdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strccd' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrccdCCW")>]
  let strccdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strhsd' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhsdHSW")>]
  let strhsdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strlod' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlodLOW")>]
  let strlodw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strmid' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmidMIW")>]
  let strmidw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strpld' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrpldPLW")>]
  let strpldw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strvsd' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvsdVSW")>]
  let strvsdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strvcd' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvcdVCW")>]
  let strvcdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strhid' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhidHIW")>]
  let strhidw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strlsd' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlsdLSW")>]
  let strlsdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strged' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgedGEW")>]
  let strgedw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strltd' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrltdLTW")>]
  let strltdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strgtd' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgtdGTW")>]
  let strgtdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strled' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrledLEW")>]
  let strledw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strd' instruction that executes unconditionally.
  [<CompiledName("EmitStrdW")>]
  let strdw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 256 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strexeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStrexeqEQ")>]
  let strexeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrexneNE")>]
  let strexne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrexcsCS")>]
  let strexcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrexccCC")>]
  let strexcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrexhsHS")>]
  let strexhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrexloLO")>]
  let strexlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrexmiMI")>]
  let strexmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrexplPL")>]
  let strexpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrexvsVS")>]
  let strexvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrexvcVC")>]
  let strexvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrexhiHI")>]
  let strexhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrexlsLS")>]
  let strexls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrexgeGE")>]
  let strexge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrexltLT")>]
  let strexlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrexgtGT")>]
  let strexgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strexle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrexleLE")>]
  let strexle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'strex' instruction that executes unconditionally.
  [<CompiledName("EmitStrex")>]
  let strex (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 8388608 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| 4096 ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'streqh' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqhEQ")>]
  let streqh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strneh' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnehNE")>]
  let strneh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strcsh' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcshCS")>]
  let strcsh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strcch' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrcchCC")>]
  let strcch (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strhsh' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhshHS")>]
  let strhsh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strloh' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlohLO")>]
  let strloh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strmih' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmihMI")>]
  let strmih (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strplh' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrplhPL")>]
  let strplh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strvsh' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvshVS")>]
  let strvsh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strvch' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvchVC")>]
  let strvch (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strhih' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhihHI")>]
  let strhih (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strlsh' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlshLS")>]
  let strlsh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strgeh' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgehGE")>]
  let strgeh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strlth' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrlthLT")>]
  let strlth (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strgth' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgthGT")>]
  let strgth (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strleh' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrlehLE")>]
  let strleh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'strh' instruction that executes unconditionally.
  [<CompiledName("EmitStrh")>]
  let strh (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2))
  /// Emits a 'streqh' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqhEQW")>]
  let streqhw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.EQ + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strneh' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnehNEW")>]
  let strnehw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.NE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strcsh' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcshCSW")>]
  let strcshw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strcch' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrcchCCW")>]
  let strcchw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.CC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strhsh' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhshHSW")>]
  let strhshw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strloh' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlohLOW")>]
  let strlohw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LO + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strmih' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmihMIW")>]
  let strmihw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.MI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strplh' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrplhPLW")>]
  let strplhw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.PL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strvsh' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvshVSW")>]
  let strvshw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strvch' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvchVCW")>]
  let strvchw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.VC + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strhih' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhihHIW")>]
  let strhihw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.HI + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strlsh' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlshLSW")>]
  let strlshw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LS + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strgeh' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgehGEW")>]
  let strgehw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strlth' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrlthLTW")>]
  let strlthw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strgth' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgthGTW")>]
  let strgthw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.GT + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strleh' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrlehLEW")>]
  let strlehw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.LE + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'strh' instruction that executes unconditionally.
  [<CompiledName("EmitStrhW")>]
  let strhw (src : Register) (dst : Register) (addrmode1 : AddressingMode) (addrmode2 : AddressingMode)  = instr Condition.AL + (((int src.Value) <<< 18) ||| ((int dst.Value) <<< 14) ||| (addrmode1.Bits4 <<< 10) ||| 512 ||| 128 ||| 64 ||| (addrmode2.Bits4 <<< 2) ||| 8388608)
  /// Emits a 'streqt' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitStreqtEQ")>]
  let streqt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.EQ + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strnet' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitStrnetNE")>]
  let strnet (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.NE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strcst' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitStrcstCS")>]
  let strcst (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strcct' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitStrcctCC")>]
  let strcct (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.CC + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strhst' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitStrhstHS")>]
  let strhst (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strlot' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitStrlotLO")>]
  let strlot (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LO + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strmit' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitStrmitMI")>]
  let strmit (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.MI + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strplt' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitStrpltPL")>]
  let strplt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.PL + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strvst' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitStrvstVS")>]
  let strvst (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strvct' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitStrvctVC")>]
  let strvct (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.VC + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strhit' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitStrhitHI")>]
  let strhit (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.HI + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strlst' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitStrlstLS")>]
  let strlst (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LS + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strget' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitStrgetGE")>]
  let strget (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strltt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitStrlttLT")>]
  let strltt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LT + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strgtt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitStrgttGT")>]
  let strgtt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.GT + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strlet' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitStrletLE")>]
  let strlet (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.LE + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'strt' instruction that executes unconditionally.
  [<CompiledName("EmitStrt")>]
  let strt (src : Register) (dst : Register) (addrmode : AddressingMode)  = instr Condition.AL + (67108864 ||| 4194304 ||| ((int src.Value) <<< 17) ||| ((int dst.Value) <<< 13) ||| (addrmode.Bits12 <<< 1))
  /// Emits a 'swieq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSwieqEQ")>]
  let swieq (immediate : uint32)  = instr Condition.EQ + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swine' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSwineNE")>]
  let swine (immediate : uint32)  = instr Condition.NE + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swics' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSwicsCS")>]
  let swics (immediate : uint32)  = instr Condition.CS + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swicc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSwiccCC")>]
  let swicc (immediate : uint32)  = instr Condition.CC + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swihs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSwihsHS")>]
  let swihs (immediate : uint32)  = instr Condition.HS + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swilo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSwiloLO")>]
  let swilo (immediate : uint32)  = instr Condition.LO + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swimi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSwimiMI")>]
  let swimi (immediate : uint32)  = instr Condition.MI + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swipl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSwiplPL")>]
  let swipl (immediate : uint32)  = instr Condition.PL + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swivs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSwivsVS")>]
  let swivs (immediate : uint32)  = instr Condition.VS + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swivc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSwivcVC")>]
  let swivc (immediate : uint32)  = instr Condition.VC + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swihi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSwihiHI")>]
  let swihi (immediate : uint32)  = instr Condition.HI + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swils' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSwilsLS")>]
  let swils (immediate : uint32)  = instr Condition.LS + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swige' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSwigeGE")>]
  let swige (immediate : uint32)  = instr Condition.GE + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swilt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSwiltLT")>]
  let swilt (immediate : uint32)  = instr Condition.LT + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swigt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSwigtGT")>]
  let swigt (immediate : uint32)  = instr Condition.GT + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swile' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSwileLE")>]
  let swile (immediate : uint32)  = instr Condition.LE + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swi' instruction that executes unconditionally.
  [<CompiledName("EmitSwi")>]
  let swi (immediate : uint32)  = instr Condition.AL + (134217728 ||| 67108864 ||| 33554432 ||| 16777216 ||| ((int immediate) <<< 0))
  /// Emits a 'swpeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSwpeqEQ")>]
  let swpeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSwpneNE")>]
  let swpne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSwpcsCS")>]
  let swpcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSwpccCC")>]
  let swpcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swphs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSwphsHS")>]
  let swphs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swplo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSwploLO")>]
  let swplo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSwpmiMI")>]
  let swpmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swppl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSwpplPL")>]
  let swppl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSwpvsVS")>]
  let swpvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSwpvcVC")>]
  let swpvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swphi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSwphiHI")>]
  let swphi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSwplsLS")>]
  let swpls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSwpgeGE")>]
  let swpge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swplt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSwpltLT")>]
  let swplt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSwpgtGT")>]
  let swpgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swple' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSwpleLE")>]
  let swple (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swp' instruction that executes unconditionally.
  [<CompiledName("EmitSwp")>]
  let swp (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSwpbeqEQ")>]
  let swpbeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSwpbneNE")>]
  let swpbne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSwpbcsCS")>]
  let swpbcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSwpbccCC")>]
  let swpbcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSwpbhsHS")>]
  let swpbhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSwpbloLO")>]
  let swpblo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSwpbmiMI")>]
  let swpbmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSwpbplPL")>]
  let swpbpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSwpbvsVS")>]
  let swpbvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSwpbvcVC")>]
  let swpbvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSwpbhiHI")>]
  let swpbhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSwpblsLS")>]
  let swpbls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSwpbgeGE")>]
  let swpbge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSwpbltLT")>]
  let swpblt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSwpbgtGT")>]
  let swpbgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSwpbleLE")>]
  let swpble (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'swpb' instruction that executes unconditionally.
  [<CompiledName("EmitSwpb")>]
  let swpb (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (16777216 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSxtabeqEQ")>]
  let sxtabeq (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSxtabneNE")>]
  let sxtabne (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSxtabcsCS")>]
  let sxtabcs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSxtabccCC")>]
  let sxtabcc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSxtabhsHS")>]
  let sxtabhs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtablo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSxtabloLO")>]
  let sxtablo (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSxtabmiMI")>]
  let sxtabmi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSxtabplPL")>]
  let sxtabpl (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSxtabvsVS")>]
  let sxtabvs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSxtabvcVC")>]
  let sxtabvc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSxtabhiHI")>]
  let sxtabhi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSxtablsLS")>]
  let sxtabls (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSxtabgeGE")>]
  let sxtabge (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtablt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSxtabltLT")>]
  let sxtablt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtabgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSxtabgtGT")>]
  let sxtabgt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtable' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSxtableLE")>]
  let sxtable (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab' instruction that executes unconditionally.
  [<CompiledName("EmitSxtab")>]
  let sxtab (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSxtab16eqEQ")>]
  let sxtab16eq (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSxtab16neNE")>]
  let sxtab16ne (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSxtab16csCS")>]
  let sxtab16cs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSxtab16ccCC")>]
  let sxtab16cc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSxtab16hsHS")>]
  let sxtab16hs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSxtab16loLO")>]
  let sxtab16lo (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSxtab16miMI")>]
  let sxtab16mi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSxtab16plPL")>]
  let sxtab16pl (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSxtab16vsVS")>]
  let sxtab16vs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSxtab16vcVC")>]
  let sxtab16vc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSxtab16hiHI")>]
  let sxtab16hi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSxtab16lsLS")>]
  let sxtab16ls (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSxtab16geGE")>]
  let sxtab16ge (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSxtab16ltLT")>]
  let sxtab16lt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSxtab16gtGT")>]
  let sxtab16gt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSxtab16leLE")>]
  let sxtab16le (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtab16' instruction that executes unconditionally.
  [<CompiledName("EmitSxtab16")>]
  let sxtab16 (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtaheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSxtaheqEQ")>]
  let sxtaheq (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSxtahneNE")>]
  let sxtahne (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSxtahcsCS")>]
  let sxtahcs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSxtahccCC")>]
  let sxtahcc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSxtahhsHS")>]
  let sxtahhs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSxtahloLO")>]
  let sxtahlo (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSxtahmiMI")>]
  let sxtahmi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSxtahplPL")>]
  let sxtahpl (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSxtahvsVS")>]
  let sxtahvs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSxtahvcVC")>]
  let sxtahvc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSxtahhiHI")>]
  let sxtahhi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSxtahlsLS")>]
  let sxtahls (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSxtahgeGE")>]
  let sxtahge (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSxtahltLT")>]
  let sxtahlt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSxtahgtGT")>]
  let sxtahgt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtahle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSxtahleLE")>]
  let sxtahle (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtah' instruction that executes unconditionally.
  [<CompiledName("EmitSxtah")>]
  let sxtah (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSxtbeqEQ")>]
  let sxtbeq (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSxtbneNE")>]
  let sxtbne (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSxtbcsCS")>]
  let sxtbcs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSxtbccCC")>]
  let sxtbcc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSxtbhsHS")>]
  let sxtbhs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSxtbloLO")>]
  let sxtblo (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSxtbmiMI")>]
  let sxtbmi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSxtbplPL")>]
  let sxtbpl (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSxtbvsVS")>]
  let sxtbvs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSxtbvcVC")>]
  let sxtbvc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSxtbhiHI")>]
  let sxtbhi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSxtblsLS")>]
  let sxtbls (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSxtbgeGE")>]
  let sxtbge (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSxtbltLT")>]
  let sxtblt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSxtbgtGT")>]
  let sxtbgt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSxtbleLE")>]
  let sxtble (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb' instruction that executes unconditionally.
  [<CompiledName("EmitSxtb")>]
  let sxtb (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSxtb16eqEQ")>]
  let sxtb16eq (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSxtb16neNE")>]
  let sxtb16ne (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSxtb16csCS")>]
  let sxtb16cs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSxtb16ccCC")>]
  let sxtb16cc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSxtb16hsHS")>]
  let sxtb16hs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSxtb16loLO")>]
  let sxtb16lo (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSxtb16miMI")>]
  let sxtb16mi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSxtb16plPL")>]
  let sxtb16pl (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSxtb16vsVS")>]
  let sxtb16vs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSxtb16vcVC")>]
  let sxtb16vc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSxtb16hiHI")>]
  let sxtb16hi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSxtb16lsLS")>]
  let sxtb16ls (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSxtb16geGE")>]
  let sxtb16ge (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSxtb16ltLT")>]
  let sxtb16lt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSxtb16gtGT")>]
  let sxtb16gt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSxtb16leLE")>]
  let sxtb16le (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtb16' instruction that executes unconditionally.
  [<CompiledName("EmitSxtb16")>]
  let sxtb16 (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxtheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitSxtheqEQ")>]
  let sxtheq (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitSxthneNE")>]
  let sxthne (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitSxthcsCS")>]
  let sxthcs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitSxthccCC")>]
  let sxthcc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitSxthhsHS")>]
  let sxthhs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitSxthloLO")>]
  let sxthlo (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitSxthmiMI")>]
  let sxthmi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitSxthplPL")>]
  let sxthpl (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitSxthvsVS")>]
  let sxthvs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitSxthvcVC")>]
  let sxthvc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitSxthhiHI")>]
  let sxthhi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitSxthlsLS")>]
  let sxthls (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitSxthgeGE")>]
  let sxthge (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitSxthltLT")>]
  let sxthlt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitSxthgtGT")>]
  let sxthgt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxthle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitSxthleLE")>]
  let sxthle (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'sxth' instruction that executes unconditionally.
  [<CompiledName("EmitSxth")>]
  let sxth (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'teqeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitTeqeqEQ")>]
  let teqeq (src : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitTeqneNE")>]
  let teqne (src : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitTeqcsCS")>]
  let teqcs (src : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitTeqccCC")>]
  let teqcc (src : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitTeqhsHS")>]
  let teqhs (src : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitTeqloLO")>]
  let teqlo (src : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitTeqmiMI")>]
  let teqmi (src : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitTeqplPL")>]
  let teqpl (src : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitTeqvsVS")>]
  let teqvs (src : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitTeqvcVC")>]
  let teqvc (src : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitTeqhiHI")>]
  let teqhi (src : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitTeqlsLS")>]
  let teqls (src : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitTeqgeGE")>]
  let teqge (src : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitTeqltLT")>]
  let teqlt (src : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitTeqgtGT")>]
  let teqgt (src : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teqle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitTeqleLE")>]
  let teqle (src : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'teq' instruction that executes unconditionally.
  [<CompiledName("EmitTeq")>]
  let teq (src : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tsteq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitTsteqEQ")>]
  let tsteq (src : Register) (shifter : Operand)  = instr Condition.EQ + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitTstneNE")>]
  let tstne (src : Register) (shifter : Operand)  = instr Condition.NE + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitTstcsCS")>]
  let tstcs (src : Register) (shifter : Operand)  = instr Condition.CS + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitTstccCC")>]
  let tstcc (src : Register) (shifter : Operand)  = instr Condition.CC + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tsths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitTsthsHS")>]
  let tsths (src : Register) (shifter : Operand)  = instr Condition.HS + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitTstloLO")>]
  let tstlo (src : Register) (shifter : Operand)  = instr Condition.LO + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitTstmiMI")>]
  let tstmi (src : Register) (shifter : Operand)  = instr Condition.MI + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitTstplPL")>]
  let tstpl (src : Register) (shifter : Operand)  = instr Condition.PL + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitTstvsVS")>]
  let tstvs (src : Register) (shifter : Operand)  = instr Condition.VS + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitTstvcVC")>]
  let tstvc (src : Register) (shifter : Operand)  = instr Condition.VC + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tsthi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitTsthiHI")>]
  let tsthi (src : Register) (shifter : Operand)  = instr Condition.HI + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitTstlsLS")>]
  let tstls (src : Register) (shifter : Operand)  = instr Condition.LS + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitTstgeGE")>]
  let tstge (src : Register) (shifter : Operand)  = instr Condition.GE + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitTstltLT")>]
  let tstlt (src : Register) (shifter : Operand)  = instr Condition.LT + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitTstgtGT")>]
  let tstgt (src : Register) (shifter : Operand)  = instr Condition.GT + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tstle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitTstleLE")>]
  let tstle (src : Register) (shifter : Operand)  = instr Condition.LE + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'tst' instruction that executes unconditionally.
  [<CompiledName("EmitTst")>]
  let tst (src : Register) (shifter : Operand)  = instr Condition.AL + (16777216 ||| 1048576 ||| ((int src.Value) <<< 16) ||| (shifter.Bits <<< 0))
  /// Emits a 'uadd16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUadd16eqEQ")>]
  let uadd16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUadd16neNE")>]
  let uadd16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUadd16csCS")>]
  let uadd16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUadd16ccCC")>]
  let uadd16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUadd16hsHS")>]
  let uadd16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUadd16loLO")>]
  let uadd16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUadd16miMI")>]
  let uadd16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUadd16plPL")>]
  let uadd16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUadd16vsVS")>]
  let uadd16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUadd16vcVC")>]
  let uadd16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUadd16hiHI")>]
  let uadd16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUadd16lsLS")>]
  let uadd16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUadd16geGE")>]
  let uadd16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUadd16ltLT")>]
  let uadd16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUadd16gtGT")>]
  let uadd16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUadd16leLE")>]
  let uadd16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd16' instruction that executes unconditionally.
  [<CompiledName("EmitUadd16")>]
  let uadd16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUadd8eqEQ")>]
  let uadd8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUadd8neNE")>]
  let uadd8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUadd8csCS")>]
  let uadd8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUadd8ccCC")>]
  let uadd8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUadd8hsHS")>]
  let uadd8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUadd8loLO")>]
  let uadd8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUadd8miMI")>]
  let uadd8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUadd8plPL")>]
  let uadd8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUadd8vsVS")>]
  let uadd8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUadd8vcVC")>]
  let uadd8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUadd8hiHI")>]
  let uadd8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUadd8lsLS")>]
  let uadd8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUadd8geGE")>]
  let uadd8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUadd8ltLT")>]
  let uadd8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUadd8gtGT")>]
  let uadd8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUadd8leLE")>]
  let uadd8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uadd8' instruction that executes unconditionally.
  [<CompiledName("EmitUadd8")>]
  let uadd8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUaddsubxeqEQ")>]
  let uaddsubxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUaddsubxneNE")>]
  let uaddsubxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUaddsubxcsCS")>]
  let uaddsubxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUaddsubxccCC")>]
  let uaddsubxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUaddsubxhsHS")>]
  let uaddsubxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUaddsubxloLO")>]
  let uaddsubxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUaddsubxmiMI")>]
  let uaddsubxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUaddsubxplPL")>]
  let uaddsubxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUaddsubxvsVS")>]
  let uaddsubxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUaddsubxvcVC")>]
  let uaddsubxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUaddsubxhiHI")>]
  let uaddsubxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUaddsubxlsLS")>]
  let uaddsubxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUaddsubxgeGE")>]
  let uaddsubxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUaddsubxltLT")>]
  let uaddsubxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUaddsubxgtGT")>]
  let uaddsubxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUaddsubxleLE")>]
  let uaddsubxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uaddsubx' instruction that executes unconditionally.
  [<CompiledName("EmitUaddsubx")>]
  let uaddsubx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUhadd16eqEQ")>]
  let uhadd16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUhadd16neNE")>]
  let uhadd16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUhadd16csCS")>]
  let uhadd16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUhadd16ccCC")>]
  let uhadd16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUhadd16hsHS")>]
  let uhadd16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUhadd16loLO")>]
  let uhadd16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUhadd16miMI")>]
  let uhadd16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUhadd16plPL")>]
  let uhadd16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUhadd16vsVS")>]
  let uhadd16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUhadd16vcVC")>]
  let uhadd16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUhadd16hiHI")>]
  let uhadd16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUhadd16lsLS")>]
  let uhadd16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUhadd16geGE")>]
  let uhadd16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUhadd16ltLT")>]
  let uhadd16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUhadd16gtGT")>]
  let uhadd16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUhadd16leLE")>]
  let uhadd16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd16' instruction that executes unconditionally.
  [<CompiledName("EmitUhadd16")>]
  let uhadd16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUhadd8eqEQ")>]
  let uhadd8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUhadd8neNE")>]
  let uhadd8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUhadd8csCS")>]
  let uhadd8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUhadd8ccCC")>]
  let uhadd8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUhadd8hsHS")>]
  let uhadd8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUhadd8loLO")>]
  let uhadd8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUhadd8miMI")>]
  let uhadd8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUhadd8plPL")>]
  let uhadd8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUhadd8vsVS")>]
  let uhadd8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUhadd8vcVC")>]
  let uhadd8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUhadd8hiHI")>]
  let uhadd8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUhadd8lsLS")>]
  let uhadd8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUhadd8geGE")>]
  let uhadd8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUhadd8ltLT")>]
  let uhadd8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUhadd8gtGT")>]
  let uhadd8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUhadd8leLE")>]
  let uhadd8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhadd8' instruction that executes unconditionally.
  [<CompiledName("EmitUhadd8")>]
  let uhadd8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUhaddsubxeqEQ")>]
  let uhaddsubxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUhaddsubxneNE")>]
  let uhaddsubxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUhaddsubxcsCS")>]
  let uhaddsubxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUhaddsubxccCC")>]
  let uhaddsubxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUhaddsubxhsHS")>]
  let uhaddsubxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUhaddsubxloLO")>]
  let uhaddsubxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUhaddsubxmiMI")>]
  let uhaddsubxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUhaddsubxplPL")>]
  let uhaddsubxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUhaddsubxvsVS")>]
  let uhaddsubxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUhaddsubxvcVC")>]
  let uhaddsubxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUhaddsubxhiHI")>]
  let uhaddsubxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUhaddsubxlsLS")>]
  let uhaddsubxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUhaddsubxgeGE")>]
  let uhaddsubxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUhaddsubxltLT")>]
  let uhaddsubxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUhaddsubxgtGT")>]
  let uhaddsubxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUhaddsubxleLE")>]
  let uhaddsubxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhaddsubx' instruction that executes unconditionally.
  [<CompiledName("EmitUhaddsubx")>]
  let uhaddsubx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUhsub16eqEQ")>]
  let uhsub16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUhsub16neNE")>]
  let uhsub16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUhsub16csCS")>]
  let uhsub16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUhsub16ccCC")>]
  let uhsub16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUhsub16hsHS")>]
  let uhsub16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUhsub16loLO")>]
  let uhsub16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUhsub16miMI")>]
  let uhsub16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUhsub16plPL")>]
  let uhsub16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUhsub16vsVS")>]
  let uhsub16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUhsub16vcVC")>]
  let uhsub16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUhsub16hiHI")>]
  let uhsub16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUhsub16lsLS")>]
  let uhsub16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUhsub16geGE")>]
  let uhsub16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUhsub16ltLT")>]
  let uhsub16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUhsub16gtGT")>]
  let uhsub16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUhsub16leLE")>]
  let uhsub16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub16' instruction that executes unconditionally.
  [<CompiledName("EmitUhsub16")>]
  let uhsub16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUhsub8eqEQ")>]
  let uhsub8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUhsub8neNE")>]
  let uhsub8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUhsub8csCS")>]
  let uhsub8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUhsub8ccCC")>]
  let uhsub8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUhsub8hsHS")>]
  let uhsub8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUhsub8loLO")>]
  let uhsub8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUhsub8miMI")>]
  let uhsub8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUhsub8plPL")>]
  let uhsub8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUhsub8vsVS")>]
  let uhsub8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUhsub8vcVC")>]
  let uhsub8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUhsub8hiHI")>]
  let uhsub8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUhsub8lsLS")>]
  let uhsub8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUhsub8geGE")>]
  let uhsub8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUhsub8ltLT")>]
  let uhsub8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUhsub8gtGT")>]
  let uhsub8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUhsub8leLE")>]
  let uhsub8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsub8' instruction that executes unconditionally.
  [<CompiledName("EmitUhsub8")>]
  let uhsub8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUhsubaddxeqEQ")>]
  let uhsubaddxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUhsubaddxneNE")>]
  let uhsubaddxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUhsubaddxcsCS")>]
  let uhsubaddxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUhsubaddxccCC")>]
  let uhsubaddxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUhsubaddxhsHS")>]
  let uhsubaddxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUhsubaddxloLO")>]
  let uhsubaddxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUhsubaddxmiMI")>]
  let uhsubaddxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUhsubaddxplPL")>]
  let uhsubaddxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUhsubaddxvsVS")>]
  let uhsubaddxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUhsubaddxvcVC")>]
  let uhsubaddxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUhsubaddxhiHI")>]
  let uhsubaddxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUhsubaddxlsLS")>]
  let uhsubaddxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUhsubaddxgeGE")>]
  let uhsubaddxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUhsubaddxltLT")>]
  let uhsubaddxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUhsubaddxgtGT")>]
  let uhsubaddxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUhsubaddxleLE")>]
  let uhsubaddxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uhsubaddx' instruction that executes unconditionally.
  [<CompiledName("EmitUhsubaddx")>]
  let uhsubaddx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaaleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUmaaleqEQ")>]
  let umaaleq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUmaalneNE")>]
  let umaalne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUmaalcsCS")>]
  let umaalcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUmaalccCC")>]
  let umaalcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUmaalhsHS")>]
  let umaalhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaallo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUmaalloLO")>]
  let umaallo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUmaalmiMI")>]
  let umaalmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUmaalplPL")>]
  let umaalpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUmaalvsVS")>]
  let umaalvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUmaalvcVC")>]
  let umaalvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUmaalhiHI")>]
  let umaalhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUmaallsLS")>]
  let umaalls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUmaalgeGE")>]
  let umaalge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaallt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUmaalltLT")>]
  let umaallt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUmaalgtGT")>]
  let umaalgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaalle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUmaalleLE")>]
  let umaalle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umaal' instruction that executes unconditionally.
  [<CompiledName("EmitUmaal")>]
  let umaal (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (4194304 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlaleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUmlaleqEQ")>]
  let umlaleq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUmlalneNE")>]
  let umlalne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUmlalcsCS")>]
  let umlalcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUmlalccCC")>]
  let umlalcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUmlalhsHS")>]
  let umlalhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlallo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUmlalloLO")>]
  let umlallo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUmlalmiMI")>]
  let umlalmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUmlalplPL")>]
  let umlalpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUmlalvsVS")>]
  let umlalvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUmlalvcVC")>]
  let umlalvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUmlalhiHI")>]
  let umlalhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUmlallsLS")>]
  let umlalls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUmlalgeGE")>]
  let umlalge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlallt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUmlalltLT")>]
  let umlallt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUmlalgtGT")>]
  let umlalgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlalle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUmlalleLE")>]
  let umlalle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlal' instruction that executes unconditionally.
  [<CompiledName("EmitUmlal")>]
  let umlal (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umlaleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUmlaleqEQS")>]
  let umlaleqs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUmlalneNES")>]
  let umlalnes (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUmlalcsCSS")>]
  let umlalcss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUmlalccCCS")>]
  let umlalccs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUmlalhsHSS")>]
  let umlalhss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlallo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUmlalloLOS")>]
  let umlallos (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUmlalmiMIS")>]
  let umlalmis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUmlalplPLS")>]
  let umlalpls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUmlalvsVSS")>]
  let umlalvss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUmlalvcVCS")>]
  let umlalvcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUmlalhiHIS")>]
  let umlalhis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUmlallsLSS")>]
  let umlallss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUmlalgeGES")>]
  let umlalges (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlallt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUmlalltLTS")>]
  let umlallts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUmlalgtGTS")>]
  let umlalgts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlalle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUmlalleLES")>]
  let umlalles (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umlal' instruction that executes unconditionally.
  [<CompiledName("EmitUmlalS")>]
  let umlals (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (8388608 ||| 2097152 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umulleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUmulleqEQ")>]
  let umulleq (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUmullneNE")>]
  let umullne (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUmullcsCS")>]
  let umullcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUmullccCC")>]
  let umullcc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUmullhsHS")>]
  let umullhs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umulllo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUmullloLO")>]
  let umulllo (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUmullmiMI")>]
  let umullmi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUmullplPL")>]
  let umullpl (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUmullvsVS")>]
  let umullvs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUmullvcVC")>]
  let umullvc (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUmullhiHI")>]
  let umullhi (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUmulllsLS")>]
  let umullls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUmullgeGE")>]
  let umullge (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umulllt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUmullltLT")>]
  let umulllt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUmullgtGT")>]
  let umullgt (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umullle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUmullleLE")>]
  let umullle (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umull' instruction that executes unconditionally.
  [<CompiledName("EmitUmull")>]
  let umull (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'umulleq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUmulleqEQS")>]
  let umulleqs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUmullneNES")>]
  let umullnes (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUmullcsCSS")>]
  let umullcss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUmullccCCS")>]
  let umullccs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUmullhsHSS")>]
  let umullhss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umulllo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUmullloLOS")>]
  let umulllos (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUmullmiMIS")>]
  let umullmis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUmullplPLS")>]
  let umullpls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUmullvsVSS")>]
  let umullvss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUmullvcVCS")>]
  let umullvcs (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUmullhiHIS")>]
  let umullhis (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUmulllsLSS")>]
  let umulllss (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUmullgeGES")>]
  let umullges (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umulllt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUmullltLTS")>]
  let umulllts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUmullgtGTS")>]
  let umullgts (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umullle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUmullleLES")>]
  let umullles (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'umull' instruction that executes unconditionally.
  [<CompiledName("EmitUmullS")>]
  let umulls (upper : Register) (lower : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (8388608 ||| ((int upper.Value) <<< 16) ||| ((int lower.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0) ||| 1048576)
  /// Emits a 'uqadd16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUqadd16eqEQ")>]
  let uqadd16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUqadd16neNE")>]
  let uqadd16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUqadd16csCS")>]
  let uqadd16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUqadd16ccCC")>]
  let uqadd16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUqadd16hsHS")>]
  let uqadd16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUqadd16loLO")>]
  let uqadd16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUqadd16miMI")>]
  let uqadd16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUqadd16plPL")>]
  let uqadd16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUqadd16vsVS")>]
  let uqadd16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUqadd16vcVC")>]
  let uqadd16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUqadd16hiHI")>]
  let uqadd16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUqadd16lsLS")>]
  let uqadd16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUqadd16geGE")>]
  let uqadd16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUqadd16ltLT")>]
  let uqadd16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUqadd16gtGT")>]
  let uqadd16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUqadd16leLE")>]
  let uqadd16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd16' instruction that executes unconditionally.
  [<CompiledName("EmitUqadd16")>]
  let uqadd16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUqadd8eqEQ")>]
  let uqadd8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUqadd8neNE")>]
  let uqadd8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUqadd8csCS")>]
  let uqadd8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUqadd8ccCC")>]
  let uqadd8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUqadd8hsHS")>]
  let uqadd8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUqadd8loLO")>]
  let uqadd8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUqadd8miMI")>]
  let uqadd8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUqadd8plPL")>]
  let uqadd8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUqadd8vsVS")>]
  let uqadd8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUqadd8vcVC")>]
  let uqadd8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUqadd8hiHI")>]
  let uqadd8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUqadd8lsLS")>]
  let uqadd8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUqadd8geGE")>]
  let uqadd8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUqadd8ltLT")>]
  let uqadd8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUqadd8gtGT")>]
  let uqadd8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUqadd8leLE")>]
  let uqadd8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqadd8' instruction that executes unconditionally.
  [<CompiledName("EmitUqadd8")>]
  let uqadd8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUqaddsubxeqEQ")>]
  let uqaddsubxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUqaddsubxneNE")>]
  let uqaddsubxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUqaddsubxcsCS")>]
  let uqaddsubxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUqaddsubxccCC")>]
  let uqaddsubxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUqaddsubxhsHS")>]
  let uqaddsubxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUqaddsubxloLO")>]
  let uqaddsubxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUqaddsubxmiMI")>]
  let uqaddsubxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUqaddsubxplPL")>]
  let uqaddsubxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUqaddsubxvsVS")>]
  let uqaddsubxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUqaddsubxvcVC")>]
  let uqaddsubxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUqaddsubxhiHI")>]
  let uqaddsubxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUqaddsubxlsLS")>]
  let uqaddsubxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUqaddsubxgeGE")>]
  let uqaddsubxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUqaddsubxltLT")>]
  let uqaddsubxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUqaddsubxgtGT")>]
  let uqaddsubxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUqaddsubxleLE")>]
  let uqaddsubxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqaddsubx' instruction that executes unconditionally.
  [<CompiledName("EmitUqaddsubx")>]
  let uqaddsubx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUqsub16eqEQ")>]
  let uqsub16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUqsub16neNE")>]
  let uqsub16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUqsub16csCS")>]
  let uqsub16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUqsub16ccCC")>]
  let uqsub16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUqsub16hsHS")>]
  let uqsub16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUqsub16loLO")>]
  let uqsub16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUqsub16miMI")>]
  let uqsub16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUqsub16plPL")>]
  let uqsub16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUqsub16vsVS")>]
  let uqsub16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUqsub16vcVC")>]
  let uqsub16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUqsub16hiHI")>]
  let uqsub16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUqsub16lsLS")>]
  let uqsub16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUqsub16geGE")>]
  let uqsub16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUqsub16ltLT")>]
  let uqsub16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUqsub16gtGT")>]
  let uqsub16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUqsub16leLE")>]
  let uqsub16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub16' instruction that executes unconditionally.
  [<CompiledName("EmitUqsub16")>]
  let uqsub16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUqsub8eqEQ")>]
  let uqsub8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUqsub8neNE")>]
  let uqsub8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUqsub8csCS")>]
  let uqsub8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUqsub8ccCC")>]
  let uqsub8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUqsub8hsHS")>]
  let uqsub8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUqsub8loLO")>]
  let uqsub8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUqsub8miMI")>]
  let uqsub8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUqsub8plPL")>]
  let uqsub8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUqsub8vsVS")>]
  let uqsub8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUqsub8vcVC")>]
  let uqsub8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUqsub8hiHI")>]
  let uqsub8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUqsub8lsLS")>]
  let uqsub8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUqsub8geGE")>]
  let uqsub8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUqsub8ltLT")>]
  let uqsub8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUqsub8gtGT")>]
  let uqsub8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUqsub8leLE")>]
  let uqsub8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsub8' instruction that executes unconditionally.
  [<CompiledName("EmitUqsub8")>]
  let uqsub8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUqsubaddxeqEQ")>]
  let uqsubaddxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUqsubaddxneNE")>]
  let uqsubaddxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUqsubaddxcsCS")>]
  let uqsubaddxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUqsubaddxccCC")>]
  let uqsubaddxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUqsubaddxhsHS")>]
  let uqsubaddxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUqsubaddxloLO")>]
  let uqsubaddxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUqsubaddxmiMI")>]
  let uqsubaddxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUqsubaddxplPL")>]
  let uqsubaddxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUqsubaddxvsVS")>]
  let uqsubaddxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUqsubaddxvcVC")>]
  let uqsubaddxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUqsubaddxhiHI")>]
  let uqsubaddxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUqsubaddxlsLS")>]
  let uqsubaddxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUqsubaddxgeGE")>]
  let uqsubaddxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUqsubaddxltLT")>]
  let uqsubaddxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUqsubaddxgtGT")>]
  let uqsubaddxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUqsubaddxleLE")>]
  let uqsubaddxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uqsubaddx' instruction that executes unconditionally.
  [<CompiledName("EmitUqsubaddx")>]
  let uqsubaddx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUsad8eqEQ")>]
  let usad8eq (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUsad8neNE")>]
  let usad8ne (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUsad8csCS")>]
  let usad8cs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUsad8ccCC")>]
  let usad8cc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUsad8hsHS")>]
  let usad8hs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUsad8loLO")>]
  let usad8lo (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUsad8miMI")>]
  let usad8mi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUsad8plPL")>]
  let usad8pl (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUsad8vsVS")>]
  let usad8vs (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUsad8vcVC")>]
  let usad8vc (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUsad8hiHI")>]
  let usad8hi (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUsad8lsLS")>]
  let usad8ls (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUsad8geGE")>]
  let usad8ge (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUsad8ltLT")>]
  let usad8lt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUsad8gtGT")>]
  let usad8gt (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUsad8leLE")>]
  let usad8le (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usad8' instruction that executes unconditionally.
  [<CompiledName("EmitUsad8")>]
  let usad8 (dst : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| 32768 ||| 16384 ||| 8192 ||| 4096 ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUsada8eqEQ")>]
  let usada8eq (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUsada8neNE")>]
  let usada8ne (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUsada8csCS")>]
  let usada8cs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUsada8ccCC")>]
  let usada8cc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUsada8hsHS")>]
  let usada8hs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUsada8loLO")>]
  let usada8lo (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUsada8miMI")>]
  let usada8mi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUsada8plPL")>]
  let usada8pl (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUsada8vsVS")>]
  let usada8vs (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUsada8vcVC")>]
  let usada8vc (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUsada8hiHI")>]
  let usada8hi (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUsada8lsLS")>]
  let usada8ls (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUsada8geGE")>]
  let usada8ge (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUsada8ltLT")>]
  let usada8lt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUsada8gtGT")>]
  let usada8gt (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUsada8leLE")>]
  let usada8le (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usada8' instruction that executes unconditionally.
  [<CompiledName("EmitUsada8")>]
  let usada8 (dst : Register) (src : Register) (shift : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 16777216 ||| 8388608 ||| ((int dst.Value) <<< 16) ||| ((int src.Value) <<< 12) ||| ((int shift.Value) <<< 8) ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usateq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUsateqEQ")>]
  let usateq (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUsatneNE")>]
  let usatne (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUsatcsCS")>]
  let usatcs (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUsatccCC")>]
  let usatcc (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usaths' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUsathsHS")>]
  let usaths (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUsatloLO")>]
  let usatlo (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUsatmiMI")>]
  let usatmi (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUsatplPL")>]
  let usatpl (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUsatvsVS")>]
  let usatvs (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUsatvcVC")>]
  let usatvc (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usathi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUsathiHI")>]
  let usathi (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUsatlsLS")>]
  let usatls (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUsatgeGE")>]
  let usatge (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUsatltLT")>]
  let usatlt (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUsatgtGT")>]
  let usatgt (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usatle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUsatleLE")>]
  let usatle (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usat' instruction that executes unconditionally.
  [<CompiledName("EmitUsat")>]
  let usat (saturation : byte) (dst : Register) (shift : byte option) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 17) ||| ((int dst.Value) <<< 13) ||| ((match shift with Some b -> ((int b <<< 1) + 1) | _ -> 0) <<< 7) ||| 32 ||| ((int shifted.Value) <<< 1))
  /// Emits a 'usat16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUsat16eqEQ")>]
  let usat16eq (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUsat16neNE")>]
  let usat16ne (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUsat16csCS")>]
  let usat16cs (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUsat16ccCC")>]
  let usat16cc (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUsat16hsHS")>]
  let usat16hs (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUsat16loLO")>]
  let usat16lo (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUsat16miMI")>]
  let usat16mi (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUsat16plPL")>]
  let usat16pl (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUsat16vsVS")>]
  let usat16vs (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUsat16vcVC")>]
  let usat16vc (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUsat16hiHI")>]
  let usat16hi (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUsat16lsLS")>]
  let usat16ls (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUsat16geGE")>]
  let usat16ge (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUsat16ltLT")>]
  let usat16lt (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUsat16gtGT")>]
  let usat16gt (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUsat16leLE")>]
  let usat16le (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usat16' instruction that executes unconditionally.
  [<CompiledName("EmitUsat16")>]
  let usat16 (saturation : byte) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int saturation - 1) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUsub16eqEQ")>]
  let usub16eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUsub16neNE")>]
  let usub16ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUsub16csCS")>]
  let usub16cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUsub16ccCC")>]
  let usub16cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUsub16hsHS")>]
  let usub16hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUsub16loLO")>]
  let usub16lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUsub16miMI")>]
  let usub16mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUsub16plPL")>]
  let usub16pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUsub16vsVS")>]
  let usub16vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUsub16vcVC")>]
  let usub16vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUsub16hiHI")>]
  let usub16hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUsub16lsLS")>]
  let usub16ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUsub16geGE")>]
  let usub16ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUsub16ltLT")>]
  let usub16lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUsub16gtGT")>]
  let usub16gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUsub16leLE")>]
  let usub16le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub16' instruction that executes unconditionally.
  [<CompiledName("EmitUsub16")>]
  let usub16 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUsub8eqEQ")>]
  let usub8eq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUsub8neNE")>]
  let usub8ne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUsub8csCS")>]
  let usub8cs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUsub8ccCC")>]
  let usub8cc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUsub8hsHS")>]
  let usub8hs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUsub8loLO")>]
  let usub8lo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUsub8miMI")>]
  let usub8mi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUsub8plPL")>]
  let usub8pl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUsub8vsVS")>]
  let usub8vs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUsub8vcVC")>]
  let usub8vc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUsub8hiHI")>]
  let usub8hi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUsub8lsLS")>]
  let usub8ls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUsub8geGE")>]
  let usub8ge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUsub8ltLT")>]
  let usub8lt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUsub8gtGT")>]
  let usub8gt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUsub8leLE")>]
  let usub8le (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usub8' instruction that executes unconditionally.
  [<CompiledName("EmitUsub8")>]
  let usub8 (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 128 ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUsubaddxeqEQ")>]
  let usubaddxeq (src : Register) (dst : Register) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUsubaddxneNE")>]
  let usubaddxne (src : Register) (dst : Register) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUsubaddxcsCS")>]
  let usubaddxcs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUsubaddxccCC")>]
  let usubaddxcc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUsubaddxhsHS")>]
  let usubaddxhs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUsubaddxloLO")>]
  let usubaddxlo (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUsubaddxmiMI")>]
  let usubaddxmi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUsubaddxplPL")>]
  let usubaddxpl (src : Register) (dst : Register) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUsubaddxvsVS")>]
  let usubaddxvs (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUsubaddxvcVC")>]
  let usubaddxvc (src : Register) (dst : Register) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUsubaddxhiHI")>]
  let usubaddxhi (src : Register) (dst : Register) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUsubaddxlsLS")>]
  let usubaddxls (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUsubaddxgeGE")>]
  let usubaddxge (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUsubaddxltLT")>]
  let usubaddxlt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUsubaddxgtGT")>]
  let usubaddxgt (src : Register) (dst : Register) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddxle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUsubaddxleLE")>]
  let usubaddxle (src : Register) (dst : Register) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'usubaddx' instruction that executes unconditionally.
  [<CompiledName("EmitUsubaddx")>]
  let usubaddx (src : Register) (dst : Register) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 4194304 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| 2048 ||| 1024 ||| 512 ||| 256 ||| 64 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUxtabeqEQ")>]
  let uxtabeq (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUxtabneNE")>]
  let uxtabne (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUxtabcsCS")>]
  let uxtabcs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUxtabccCC")>]
  let uxtabcc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUxtabhsHS")>]
  let uxtabhs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtablo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUxtabloLO")>]
  let uxtablo (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUxtabmiMI")>]
  let uxtabmi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUxtabplPL")>]
  let uxtabpl (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUxtabvsVS")>]
  let uxtabvs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUxtabvcVC")>]
  let uxtabvc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUxtabhiHI")>]
  let uxtabhi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUxtablsLS")>]
  let uxtabls (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUxtabgeGE")>]
  let uxtabge (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtablt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUxtabltLT")>]
  let uxtablt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtabgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUxtabgtGT")>]
  let uxtabgt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtable' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUxtableLE")>]
  let uxtable (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab' instruction that executes unconditionally.
  [<CompiledName("EmitUxtab")>]
  let uxtab (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUxtab16eqEQ")>]
  let uxtab16eq (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUxtab16neNE")>]
  let uxtab16ne (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUxtab16csCS")>]
  let uxtab16cs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUxtab16ccCC")>]
  let uxtab16cc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUxtab16hsHS")>]
  let uxtab16hs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUxtab16loLO")>]
  let uxtab16lo (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUxtab16miMI")>]
  let uxtab16mi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUxtab16plPL")>]
  let uxtab16pl (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUxtab16vsVS")>]
  let uxtab16vs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUxtab16vcVC")>]
  let uxtab16vc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUxtab16hiHI")>]
  let uxtab16hi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUxtab16lsLS")>]
  let uxtab16ls (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUxtab16geGE")>]
  let uxtab16ge (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUxtab16ltLT")>]
  let uxtab16lt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUxtab16gtGT")>]
  let uxtab16gt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUxtab16leLE")>]
  let uxtab16le (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtab16' instruction that executes unconditionally.
  [<CompiledName("EmitUxtab16")>]
  let uxtab16 (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtaheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUxtaheqEQ")>]
  let uxtaheq (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUxtahneNE")>]
  let uxtahne (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUxtahcsCS")>]
  let uxtahcs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUxtahccCC")>]
  let uxtahcc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUxtahhsHS")>]
  let uxtahhs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUxtahloLO")>]
  let uxtahlo (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUxtahmiMI")>]
  let uxtahmi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUxtahplPL")>]
  let uxtahpl (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUxtahvsVS")>]
  let uxtahvs (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUxtahvcVC")>]
  let uxtahvc (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUxtahhiHI")>]
  let uxtahhi (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUxtahlsLS")>]
  let uxtahls (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUxtahgeGE")>]
  let uxtahge (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUxtahltLT")>]
  let uxtahlt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUxtahgtGT")>]
  let uxtahgt (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtahle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUxtahleLE")>]
  let uxtahle (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtah' instruction that executes unconditionally.
  [<CompiledName("EmitUxtah")>]
  let uxtah (src : Register) (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| ((int src.Value) <<< 16) ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbeq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUxtbeqEQ")>]
  let uxtbeq (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUxtbneNE")>]
  let uxtbne (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUxtbcsCS")>]
  let uxtbcs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUxtbccCC")>]
  let uxtbcc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUxtbhsHS")>]
  let uxtbhs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtblo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUxtbloLO")>]
  let uxtblo (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUxtbmiMI")>]
  let uxtbmi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUxtbplPL")>]
  let uxtbpl (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUxtbvsVS")>]
  let uxtbvs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUxtbvcVC")>]
  let uxtbvc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUxtbhiHI")>]
  let uxtbhi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUxtblsLS")>]
  let uxtbls (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUxtbgeGE")>]
  let uxtbge (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtblt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUxtbltLT")>]
  let uxtblt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtbgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUxtbgtGT")>]
  let uxtbgt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtble' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUxtbleLE")>]
  let uxtble (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb' instruction that executes unconditionally.
  [<CompiledName("EmitUxtb")>]
  let uxtb (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16eq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUxtb16eqEQ")>]
  let uxtb16eq (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16ne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUxtb16neNE")>]
  let uxtb16ne (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16cs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUxtb16csCS")>]
  let uxtb16cs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16cc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUxtb16ccCC")>]
  let uxtb16cc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16hs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUxtb16hsHS")>]
  let uxtb16hs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16lo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUxtb16loLO")>]
  let uxtb16lo (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16mi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUxtb16miMI")>]
  let uxtb16mi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16pl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUxtb16plPL")>]
  let uxtb16pl (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16vs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUxtb16vsVS")>]
  let uxtb16vs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16vc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUxtb16vcVC")>]
  let uxtb16vc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16hi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUxtb16hiHI")>]
  let uxtb16hi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16ls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUxtb16lsLS")>]
  let uxtb16ls (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16ge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUxtb16geGE")>]
  let uxtb16ge (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16lt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUxtb16ltLT")>]
  let uxtb16lt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16gt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUxtb16gtGT")>]
  let uxtb16gt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16le' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUxtb16leLE")>]
  let uxtb16le (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtb16' instruction that executes unconditionally.
  [<CompiledName("EmitUxtb16")>]
  let uxtb16 (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxtheq' instruction that only executes if the last compared numbers were equal.
  [<CompiledName("EmitUxtheqEQ")>]
  let uxtheq (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.EQ + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthne' instruction that only executes if the last compared numbers weren't equal.
  [<CompiledName("EmitUxthneNE")>]
  let uxthne (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.NE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthcs' instruction that only executes if the last operation set the carry.
  [<CompiledName("EmitUxthcsCS")>]
  let uxthcs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthcc' instruction that only executes if the last operation cleared the carry.
  [<CompiledName("EmitUxthccCC")>]
  let uxthcc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.CC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthhs' instruction that only executes if the last unsigned comparison was higher or equal.
  [<CompiledName("EmitUxthhsHS")>]
  let uxthhs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthlo' instruction that only executes if the last unsigned comparison was lower.
  [<CompiledName("EmitUxthloLO")>]
  let uxthlo (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LO + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthmi' instruction that only executes if the last set number was negative.
  [<CompiledName("EmitUxthmiMI")>]
  let uxthmi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.MI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthpl' instruction that only executes if the last set number was positive or zero.
  [<CompiledName("EmitUxthplPL")>]
  let uxthpl (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.PL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthvs' instruction that only executes if the last operation overflowed.
  [<CompiledName("EmitUxthvsVS")>]
  let uxthvs (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthvc' instruction that only executes if the last operation did not overflow.
  [<CompiledName("EmitUxthvcVC")>]
  let uxthvc (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.VC + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthhi' instruction that only executes if the last unsigned comparison was higher.
  [<CompiledName("EmitUxthhiHI")>]
  let uxthhi (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.HI + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthls' instruction that only executes if the last unsigned comparison was lower or equal.
  [<CompiledName("EmitUxthlsLS")>]
  let uxthls (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LS + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthge' instruction that only executes if the last signed comparison was higher or equal.
  [<CompiledName("EmitUxthgeGE")>]
  let uxthge (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthlt' instruction that only executes if the last signed comparison was lower.
  [<CompiledName("EmitUxthltLT")>]
  let uxthlt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthgt' instruction that only executes if the last signed comparison was higher.
  [<CompiledName("EmitUxthgtGT")>]
  let uxthgt (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.GT + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxthle' instruction that only executes if the last signed comparison was lower or equal.
  [<CompiledName("EmitUxthleLE")>]
  let uxthle (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.LE + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
  /// Emits a 'uxth' instruction that executes unconditionally.
  [<CompiledName("EmitUxth")>]
  let uxth (dst : Register) (rott : Rotate) (shifted : Register)  = instr Condition.AL + (67108864 ||| 33554432 ||| 8388608 ||| 4194304 ||| 2097152 ||| 1048576 ||| 524288 ||| 262144 ||| 131072 ||| 65536 ||| ((int dst.Value) <<< 12) ||| ((int rott) <<< 10) ||| 64 ||| 32 ||| 16 ||| ((int shifted.Value) <<< 0))
